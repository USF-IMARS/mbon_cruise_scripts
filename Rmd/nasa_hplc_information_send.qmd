---
title: "NASA-HPLC Sample Submission Form for Analysis"
author: "Sebastian Di Geronimo"
date: "2023-05-02"
format: html
---

# Info:

This file loads cruise metadata for HPLC and converts to the necessary format
used in the NASA-HPLC sample submission file before sending physical samples to 
Crystal Thomas at NASA for processing.

TODO: add way to check `hplc_progress_pres_abs.xlsx` at:
<https://usf.app.box.com/file/1203915391640>

# Setup

## Load Libraries 
```{r setup}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  # broom # optional
  
  # additional
  openxlsx, hms,
  quiet = TRUE
)

# shelf(conflicted) # may be needed if won't allow loading of certain packages

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )

source(here("scripts", "misc_functions.R"))
```

## ---- Edit: Info ----
This info is from the NASA intake form, sent in previously
```{r grant-info}
source(here(".Rprofile"))

grant_info <-
  list(
  info = rbind(
    # grant name
    str_c("The Southeast US Marine Biodiversity Observation Network (MBON): ",
          "Toward Operational Marine Life Data for Conservation and ",
          "Sustainability"),
    
    # grant number
    "80NSSC22K1779",
    
    # contact
    "Sebastian Di Geronimo, sebastian15@usf.edu"
  ),
  
  # your last name
  last_nm = "Muller-Karger"
  
  )
```

## File Paths
- Sample Info Template
- Cruise Metadata

```{r file-path}
# path to sample submission template
# looks like <HPLC_SampleInfo_template_rev2019.xlsx>
template <-
  here("data") %>%
  dir_ls(
  regexp      = "^[^~]*sampleinfo.*", 
  type        = "file",
  ignore.case = TRUE) %>%
  str_subset("ignore", negate = TRUE)

# path to cruise metadata
metadata <-
  here(cloud_dir) %>%
  dir_ls(regexp = "imars_inventory_chl_hplc_cdom") %>%
  str_subset("~", negate = TRUE) %>%
  read.xlsx(sheet = "sample_meta_data",
            detectDates = FALSE
            # rows = 1:1700
            ) %>%
  filter(str_detect(sample_type, "(?i)hplc")) %>%
  mutate(
    date     = janitor::excel_numeric_to_date(date_mm_dd_yy),
    time     = hms::as_hms(sample_collection_time_gmt),
    datetime = ymd_hms(glue("{date} {time}"), truncated = 3),
    station  = str_remove(station, "\\.0$"),
    .before  = date_mm_dd_yy
  )

# select cruise IDs for submission
cruise_id <- 
  metadata %$% 
  unique(cruise_id) %>%
  str_subset(str_c("(W[SB]|H)2[1-3]", "WS15264", "WS15320", "WS16319", sep = "|")) %>%
  str_subset(str_c("WS21093", "WS21032", sep = "|"), negate = TRUE) 

# filter metadata to match cruise IDs
metadata_filt <- 
  metadata %>%
  filter(str_detect(.data$cruise_id, str_c(.env$cruise_id, collapse = "|"))) 
```
This gets the cell locations within the `template` to add data into
```{r cell-locations}
grant_info$sheet_nm <- getSheetNames(template)

# row for adding metadata
grant_info$loc <-
  which(
    read.xlsx(
      template,
      sheet         = grant_info$sheet_nm,
      colNames      = FALSE,
      skipEmptyRows = FALSE,
    ) == "PI",
    arr.ind = TRUE
  )

# column names to use
grant_info$col_names <- 
read.xlsx(
  template,
  sheet         = grant_info$sheet_nm,
  startRow      = grant_info$loc[1],
  skipEmptyCols = FALSE
) %>%
  names()

# location to add grant info
grant_info$grant_loc <-
  which(
    read.xlsx(
      template,
      sheet         = grant_info$sheet_nm,
      colNames      = FALSE,
      skipEmptyCols = FALSE,
    ) == "Project:",
    arr.ind = TRUE
  )
```

# Get Water Body for Each Station
- Florida Keys
- West Florida Shelf
- Southwest Florida Shelf
```{r water-body}
water_body <- list(
  "Florida Keys" = c(
    glue("{1:18}"),
    glue("9.{1:9}"), "9B", "24", "LK", "MR", "WS", "21.5"
  ),
  "Southwest Florida Shelf" = c(
    glue("{30:68}"),
    glue("57.{1:3}"), "KW1", "KW2", "KW4"
  ),
  "West Florda Shelf" = c(
    "Z04-068", "CBH", "NBH", "EB1",
    as.vector(outer(
      c("AMI", "V", "TB", "CW", "L", "GP", "RP", "ROME", "CAL", "BG"),
      c(1:12),
      str_c
    ))
  )
) %T>% print()
```

# Convert Format to NASA Sample Submission Form
## Column Names
### ---- Needed Format
hplc_gsfc_id
X2
PI
sample
cruise
indicate.if.filters.are.replicates
volfilt
station
bottle
depth
water_depth
name.of.water.body
year
month
day
sdy
time
lon
lat
filter.type
filter.diameter.(mm)
filter.storage.before.shipment.to.GFC
other
other   

### ---- Current Format
base
cruise_id
year
identifier
date_mm_dd_yy
station
lon
lat
sample_collection_time_gmt
date_time
depth_m
sample_type
vol_ml
notes
sample_number
collector
max_depth

## Conversion
```{r format-info}
metadata_filt

meta_format <-
  metadata_filt %>%
  mutate(
    .keep        = "none",
    .after       = 0,
    hplc_gsfc_id = NA_character_,
    X2           = NA_character_,
    PI           = "Muller-Karger, Frank",
    sample       = identifier,
    cruise       = cruise_id,
    indicate.if.filters.are.replicates = NA_character_,
    volfilt     = vol_ml,
    station,
    bottle      = -9999,
    depth       = depth_m,
    water_depth = max_depth,
    name.of.water.body = NA_character_,
    year        = year(date),
    month       = month(date, label = TRUE, abbr = TRUE),
    day         = day(date),
    sdy         = yday(date),
    time,
    time        = round_hms(time, digits = 0),
    time        = str_remove_all(time, ":"),
    time        = str_sub(time, end = 4),
    lon,
    lat,
    filter.type = "GF/F",
    `filter.diameter.(mm)` = "25 mm",
    filter.storage.before.shipment.to.GFC = "-80C",
    # other,
    # other,
  ) %>%
  select(contains(grant_info$col_names)) %>%
  mutate(
    name.of.water.body = case_match(
      station,
      water_body[[1]] ~ names(water_body)[1],
      water_body[[2]] ~ names(water_body)[2],
      water_body[[3]] ~ names(water_body)[3],
      .default = NA_character_
    ),
    depth = if_else(is.na(depth), 1, depth),
  ) %>%
  mutate(
    .by = station,
    water_depth = if_else(!is.na(water_depth), water_depth,
      median(water_depth, na.rm = TRUE)
    )
  ) %>%
  arrange(year, month, nchar(sample), sample) %T>%
  print()

unique(meta_format$cruise)
```


## Check Spatial Locations
```{r load-base-map}
# scripts to download and create maps
source(here("scripts", "map_files_dwnlod.R"))
# fixes issue with reading raster file using decimal degrees
sf::sf_use_s2(FALSE)

# path to base map files
map_loc <- here("data", "map_shp")

# spatial extent
exnt <- c(xmin = -84, # West
          xmax = -80, # East
          ymin = 24,  # South
          ymax = 28.5 # North 
        )

# download topography (.nc) and coastline (.shp)
world_download(
  path_land  = map_loc,
  path_topo  = map_loc,
  extent     = exnt,
  use_suffix = NULL
)

# select and read coastline file from GSHHS then crop
# load maps
map_obj <-
  load_map_obj(
    .map_coast = map_loc,
    .map_state = NULL,
    .map_bath  = NULL,
    .map_file  = "etopo1.nc",
    .extent    = exnt
  )

# Plot Base Map with larger degree extent
deg <- 0.5

base_plt <- 
base_map_plot(map_obj$coast_topo, .bathy = NULL, 
              c(exnt[1] - deg, exnt[2] + deg, exnt[3] - deg, exnt[4] + deg)
              )

rm(deg)
```

```{r map-data-names, fig.height=15, fig.width=15}
meta_format %>%
  nest(.by = name.of.water.body) %>%
  mutate(
    map_plt = map2(
      .x = name.of.water.body,
      .y = data,
      function(name, data) {
        base_plt +
          geom_point(
            data = data,
            aes(
              x = lon, y = lat,
              cruise = cruise,
              group = station
            ),
            color = "gray80",
            shape = 3
          ) +
          geom_text(
            aes(
              x = lon,
              y = lat,
              label = station
            ),
            data  = data,
            size  = 3,
            hjust = 0
          ) +
          theme_bw()
      }
    )
  ) %>%
  pull(map_plt)


(base_plt +
  geom_point(
    data = select(meta_format, -name.of.water.body),
    aes(
      x = lon,
      y = lat,
      cruise = cruise,
      group = station
    ),
    color = "gray80",
    shape = 3
  ) +
  geom_point(
    data = meta_format,
    aes(
      x = lon,
      y = lat,
      cruise = cruise,
      group = station,
      color = name.of.water.body
    ),
    show.legend = FALSE
  ) +
  geom_text(
    aes(
      x = lon,
      y = lat,
      label = station
    ),
    data = meta_format,
    # data  = filter(meta_format, str_detect(name.of.water.body, "Florida Keys")),
    size = 2,
    hjust = 0
  ) +
  facet_grid(~name.of.water.body) +
  theme_bw())
```

```{r check-spatial, fig.height=15, fig.width=20}
(meta_format %>%
   # filter(station == "2" | station == "MR") %>%
   # filter(station == "2") %>%
  ggplot(aes(x = lon, y = lat, 
             cruise = cruise,
              group = station
             )) +
  geom_point(data = select(meta_format, -name.of.water.body),
             color = "gray80",
             shape = 3) +
  geom_point(aes(color = name.of.water.body)) + 
  labs(
    x = NULL,
    y = NULL,
    color = NULL) +
   facet_grid(~name.of.water.body) +
   theme_bw()
  ) %>%
  plotly::ggplotly()  %>%
  plotly::layout(legend = list(orientation = "h", x = 0.2))
```

## Check if Samples are within 10 days of the Start of Cruise
```{r date-start-end, fig.width=20, fig.height=10}
new <- new.env()
source(here("scripts", "misc_functions.R"), local = new)
attach(new)
rm(new)

cruise_event <- 
  meta_format %>%
  mutate(
    .keep = "used",
        start_date = str_extract(cruise, "\\d+"),
        start_year = str_extract(start_date, "\\d{2}"),
        start_year = str_c("20", start_year),
        doy = str_remove(start_date, "\\d{2}"),
        doy = as.numeric(doy),
        start_date = as.Date(paste0(start_year, "-01-01"), tz = "UTC") - days(1),
        start_date = as.Date(doy, origin = start_date, tz = "UTC"),
        end_date = start_date + days(10),
        start_date = as.POSIXct(start_date, tz = "GMT"),
        end_date = as.POSIXct(end_date, tz = "GMT")
    ) %>%
    select(-doy, -start_year) %>%
    distinct() 


meta_format %>%
  mutate(
    date = glue("{year}-{month}-{day}"),
    date = as_date(date),
    date = as.POSIXct(date),
  ) %>%
  nest(.by = cruise) %>%
  mutate(
    plt = pmap(
      list(
        cruise,
        data
      ),
      plot_cruise_dates, # function to plot cruise date with length of cruise
      .cruise_event = .env$cruise_event
    )
  ) %>%
  pull(plt)

detach()
```

```{r final-format}
# find previously saved files
prev_f <-
  # local_sv %>%                         # local
  here(cloud_dir, "blank_sheets") %>% # cloud

  dir_ls(regexp = glue("^[^~]*hplc.*\\.xlsx$"))

getSheetNames(prev_f)[-c(1, 5:12)]

hplc_check <-
  getSheetNames(prev_f)[-c(1, 5:12)] %>%
  map(., ~ read.xlsx(prev_f, sheet = .x, startRow = 2) %>%
  mutate(
    sheet = .x,
    collection_date = as.character(collection_date),
    station         = as.character(station),
    present         = as.character(present),
    absent          = as.character(absent),
    notes           = as.character(notes),
    collected_by    = as.character(collected_by)
  )) %>%
  list_rbind() 

hplc_miss <- 
  filter(hplc_check, str_detect(absent, "(?i)X"))

hplc_check <-
  filter(hplc_check, str_detect(present, "(?i)X"))

# filter out samples that are absent from the freezer
meta_format <-
  # test <-
  meta_format %>%
  right_join(
    x  = .,
    y  = select(hplc_check, identifier, notes),
    by = join_by("sample" == "identifier")
  ) %>%
  # add letter if single, duplicate or triplicate
  mutate(
    .by = c(cruise, station, depth),
    indicate.if.filters.are.replicates = case_when(
      str_detect(cruise, "WS16") ~ "D",
      n() < 2 ~ "S",
      n() < 3 ~ "D",
      n() >= 3 ~ "T"
    ),
    notes = case_when(
      str_detect(sample, str_c("WS15264_", seq(41, 80), collapse = "|")) &
        row_number() >= 2 ~ "*optional processing duplicate,",
      str_detect(sample, str_c("WS15320_", c(seq(40, 74), 78, 80), collapse = "|")) &
        row_number() >= 2 ~ "*optional processing duplicate,",
    )
  ) %>%
  # expand ship name in cruise column
  mutate(
    cruise = case_when(
      str_detect(cruise, "WS") ~ str_replace(cruise, "WS", "Walton Smith "),
      str_detect(cruise, "WB") ~ str_replace(cruise, "WB", "Weather Bird II "),
      str_detect(cruise, "H") ~ str_replace(cruise, "H", "Hogarth ")
    )
  ) %>%
  full_join(
    here("data", "raw", "hplc") %>%
      dir_ls(regexp = "09-02.*xlsx$") %>%
      str_subset("~", negate = TRUE) %>%
      read.xlsx(sheet = "SS from clients", startRow = 19) %>%
      filter(str_detect(sample, "WS16319")) %>%
      select("dup" = sample, cruise, station, depth),
    by = c("cruise", "station", "depth")
  ) %>%
  # add note for samples in 2015/2016
  mutate(
    notes = if_else(
      str_detect(sample, "WS16"),
      glue("**duplicate previously extracted in M-K 09-02 report, sample {dup},"),
      notes
    ),
    notes = if_else(year < 2017,
      glue(
        "{notes}",
        paste(
          "samples kept in -80C freezer until May 2023, then kept in liquid N2",
          "until shipment"
        ),
        .sep = " ",
        .na = ""
      ),
      glue("{notes}", .na = NULL)
    ),
    filter.storage.before.shipment.to.GFC =
      if_else(
        year < 2017,
        glue("{filter.storage.before.shipment.to.GFC}, and liquid N2 dry shipper"),
        filter.storage.before.shipment.to.GFC
      ),
    notes = as.character(notes)
  ) %>%
  select(-dup)

```
## Check for Missing Data
```{r check-na}
print(naniar::vis_miss(select(meta_format, -1, -2)))
count(meta_format, name = "total number of samples")
count(meta_format, cruise, name = "total number per crusie")

count(meta_format, cruise, indicate.if.filters.are.replicates, 
      name = "total", 
      .drop = FALSE) %>%
  filter(str_detect(indicate.if.filters.are.replicates, "D")) %>%
  mutate(total = as.integer(total/2))

count(meta_format, station, 
      name = "total")
```

# Save Workbook
```{r save-wb}
sv <- TRUE

dir_loc <- here("data", "metadata", "hplc_info")

if (TRUE) {
  wb <- loadWorkbook(template)

  writeData(
    wb,
    sheet    = 1,
    x        = grant_info$info,
    startRow = grant_info$grant_loc[1],
    startCol = grant_info$grant_loc[2] + 1,
    colNames = FALSE
  )

  writeData(
    wb,
    sheet    = 1,
    x        = meta_format,
    startRow = grant_info$loc[1] + 1,
    colNames = FALSE
  )

  openXL(wb)
  if (sv) {
    cli::cli_alert_warning(
      c(
        "Make sure you want to save before continuing\n",
        "[Enter] to continue\n",
        "[Esc]   to cancel\n"
      )
    )
    readline("")
  
    
    dir_create(dir_loc)
    
    cli::cli_alert_info("Saving File!")
    cli::cli_alert_info("Location: {dir_loc}")
    # save
    saveWorkbook(
      wb = wb,
      file = here(
        dir_loc,
        glue(
          grant_info$last_nm,
          format(Sys.Date(), "_%Y%m%d_"),
          str_c(cruise_id, collapse = "_"),
          ".xlsx"
        )
      ),
    overwrite = TRUE
    )
  }
}


if (FALSE) {
  dir_loc %>%
  dir_ls(regexp = grant_info$last_nm) %>%
  str_subset("~\\$", negate = TRUE) %>%
  last_mod() %>%
  file_copy(new_path = here(cloud_dir, "hplc", "hplc_sample_info"),
            overwrite = TRUE)
}
```

# ---- OLD CODE ----
```{r}
# sv <- FALSE
# if (FALSE) {
#   wb <- loadWorkbook(template)
# 
#   writeData(
#     wb,
#     sheet    = 1,
#     x        = grant_info$info,
#     startRow = grant_loc[1],
#     startCol = grant_loc[2] + 1,
#     colNames = FALSE
#   )
# 
#   writeData(wb,
#     sheet = 1,
#     x = meta_format_filt,
#     startRow = loc[1] + 1,
#     colNames = FALSE
#   )
# 
# 
#   if (!sv) {
#     # open
#     openXL(wb)
# 
#     sv <- TRUE
#   } else if (sv) {
#     cli::cli_alert_warning(
#       c(
#         "Make sure you want to save before continuing\n",
#         "[Enter] to continue\n",
#         "[Esc]   to cancel\n"
#       )
#     )
#     readline("")
# 
# 
#     cli::cli_alert_info("Saving File!")
#     # save
#     saveWorkbook(
#       wb   = wb,
#       file = here(
#         "data", "metadata",
#         glue(
#           grant_info$last_nm,
#           format(Sys.Date(), "_%Y%m%d_"),
#           str_c(cruise_id, collapse = "_"),
#           ".xlsx"
#         )
#       )
#     )
#   }
# }
# 
# 
# ---- old code
# meta_format_check <-
#   meta_format %>%
#   filter(cruise %in% getSheetNames(prev_f)) %>% 
#   full_join(hplc_check,
#     by = join_by(sample == identifier),
#     na_matches = "never"
#   ) %>%
#   mutate(
#     arr = str_extract(sheet, "\\d+"),
#     arr = if_else(is.na(arr), 
#                   str_extract(cruise, "\\d+"),
#                   arr 
#                   )
#   ) %>%
#     
#   arrange(arr) %>%
#   select(-c(1:3, 6, 9, name.of.water.body, filter.type:contains("shipment")),
#          -arr)
# 
# meta_format_filt <- 
#   meta_format_check %>%
#   filter(if_any(c(present, absent), \(x) !is.na(x)) &
#     !is.na(present)) %>%
#   select(-c(present:notes)) 
# 
# naniar::vis_miss(meta_format_check)
# naniar::vis_miss(meta_format_filt)
# 
#   
# if (TRUE || !file_exists(here("data", "metadata", "hplc_check"))) {
#   cli::cli_alert_info("Saving `hplc_check` file.")
#   openxlsx::write.xlsx(
#     meta_format_check,
#     file = here("data", "metadata",
#      glue("hplc_check",
#           ".xlsx")
#           ),
#     na = "",
#     overwrite = FALSE
#   )
#   shell.exec(here("data", "metadata",
#      glue("hplc_check",
#           ".xlsx")
#           ))
# }
```

