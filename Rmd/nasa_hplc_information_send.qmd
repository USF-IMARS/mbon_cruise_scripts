---
title: "NASA-HPLC Sample Submission Form for Analysis"
author: "Sebastian Di Geronimo"
date: "2023-05-02"
format: html
---

# Info:

This file loads cruise metadata for HPLC and converts to the necessary format
used in the NASA-HPLC sample submission file before sending physical samples to 
Crystal Thomas at NASA for processing.

TODO: add way to check `hplc_progress_pres_abs.xlsx` at:
<https://usf.app.box.com/file/1203915391640>

# Setup

## Load Libraries 
```{r setup}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  # broom # optional
  
  # additional
  openxlsx, hms
)

# shelf(conflicted) # may be needed if won't allow loading of certain packages

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )
```

## ---- Edit: Info ----
This info is from the NASA intake form, sent in previously
```{r grant-info}
grant_info <-
  list(
  info = rbind(
    # grant name
    str_c("The Southeast US Marine Biodiversity Observation Network (MBON): ",
          "Toward Operational Marine Life Data for Conservation and ",
          "Sustainability"),
    
    # grant number
    "80NSSC22K1779",
    
    # contact
    "Sebastian Di Geronimo, sebastian15@usf.edu"
  ),
  
  # your last name
  last_nm = "Digeronimo"
  
  )
```

## File Paths
- Sample Info Template
- Cruise Metadata

```{r file-path}
# path to sample submission template
# looks like <HPLC_SampleInfo_template_rev2019.xlsx>
template <-
  here("data") %>%
  dir_ls(
  regexp      = "^[^~]*sampleinfo.*", 
  type        = "file",
  ignore.case = TRUE) %>%
  str_subset("ignore", negate = TRUE)

# path to cruise metadata
metadata <-
  here(cloud_dir) %>%
  dir_ls(regexp = "imars_inventory_chl_hplc_cdom") %>%
  read.xlsx(sheet = "sample_meta_data",
            detectDates = FALSE) %>%
  filter(str_detect(sample_type, "(?i)hplc")) %>%
  mutate(
    date     = janitor::excel_numeric_to_date(date_mm_dd_yy),
    time     = hms::as_hms(sample_collection_time_gmt),
    datetime = ymd_hms(glue("{date} {time}"), truncated = 3),
    station  = str_remove(station, "\\.0$"),
    .before  = date_mm_dd_yy
  )

# select cruise IDs for submission
cruise_id <- 
metadata %$% unique(cruise_id) %>%
  str_subset(str_c("W[SB]2[1-3]", "WS15264", "WS15320", "WS16319", sep = "|")) %>%
  str_subset(str_c("WS21093", "WS21032", sep = "|"), negate = TRUE) 

# filter metadata to match cruise IDs
metadata_filt <- 
  metadata %>%
  filter(str_detect(.data$cruise_id, str_c(.env$cruise_id, collapse = "|"))) 
```

This gets the cell locations within the `template` to add data into
```{r cell-locations}
sheet_nm <- getSheetNames(template)

# row for adding metadata
loc <-
  which(
    read.xlsx(
      template,
      sheet         = sheet_nm,
      colNames      = FALSE,
      skipEmptyRows = FALSE,
    ) == "PI",
    arr.ind = TRUE
  )

# column names to use
col_names <- 
read.xlsx(
  template,
  sheet         = sheet_nm,
  startRow      = loc[1],
  skipEmptyCols = FALSE
) %>%
  names()

# location to add grant info
grant_loc <-
  which(
    read.xlsx(
      template,
      sheet         = sheet_nm,
      colNames      = FALSE,
      skipEmptyCols = FALSE,
    ) == "Project:",
    arr.ind = TRUE
  )
```

# Get Water Body for Each Station
- Florida Keys
- West Florida Shelf
- Southwest Florida Shelf
```{r water-body}
water_body <- list(
  "Florida Keys" = c(
    glue("{1:18}"),
    glue("9.{1:9}"), "9B", "24", "LK", "MR", "WS", "21.5"
  ),
  "Southwest Florida Shelf" = c(
    glue("{30:68}"),
    glue("57.{1:3}"), "KW1", "KW2", "KW4"
  ),
  "West Florda Shelf" = c(
    "Z04-068", "CBH", "NBH", "EB1",
    as.vector(outer(
      c("AMI", "V", "TB", "CW", "L", "GP", "RP", "ROME", "CAL", "BG"),
      c(1:12),
      str_c
    ))
  )
) %T>% print()
```

# Convert Format to NASA Sample Submission Form
## Column Names
### ---- Needed Format
hplc_gsfc_id
X2
PI
sample
cruise
indicate.if.filters.are.replicates
volfilt
station
bottle
depth
water_depth
name.of.water.body
year
month
day
sdy
time
lon
lat
filter.type
filter.diameter.(mm)
filter.storage.before.shipment.to.GFC
other
other   

### ---- Current Format
base
cruise_id
year
identifier
date_mm_dd_yy
station
lon
lat
sample_collection_time_gmt
date_time
depth_m
sample_type
vol_ml
notes
sample_number
collector
max_depth

## Conversion
```{r format-info}
metadata_filt
meta_format <-
  metadata_filt %>%
  mutate(
    .keep        = "none",
    .after       = 0,
    hplc_gsfc_id = NA_character_,
    X2           = NA_character_,
    PI           = "Muller-Karger, Frank",
    sample       = identifier,
    cruise       = cruise_id,
    indicate.if.filters.are.replicates = NA_character_,
    volfilt     = vol_ml,
    station,
    bottle      = -9999,
    depth       = depth_m,
    water_depth = max_depth,
    name.of.water.body = NA_character_,
    year        = year(date),
    month       = month(date, label = TRUE, abbr = TRUE),
    day         = day(date),
    sdy         = yday(date),
    time,
    time        = round_hms(time, digits = 0),
    time        = str_remove_all(time, ":"),
    time        = str_sub(time, end = 4),
    lon,
    lat,
    filter.type = "GF/F",
    `filter.diameter.(mm)` = "25 mm",
    filter.storage.before.shipment.to.GFC = "-80C",
    # other,
    # other,
  ) %>%
  select(contains(col_names)) %>%
  mutate(
    .by = c(cruise, station, depth),
    indicate.if.filters.are.replicates = case_when(
      n() < 2 ~ "S",
      n() < 3 ~ "D",
      n() >= 3 ~ "T"
    )
  ) %>%
  mutate(
    name.of.water.body = case_match(
      station,
      water_body[[1]] ~ names(water_body)[1],
      water_body[[2]] ~ names(water_body)[2],
      water_body[[3]] ~ names(water_body)[3],
      .default = NA_character_
    ),
    depth = if_else(is.na(depth), 1, depth),
  ) %>%
  mutate(
    .by = station,
    water_depth = if_else(!is.na(water_depth), water_depth,
      median(water_depth, na.rm = TRUE)
    )
  ) %>%
  arrange(year, month, nchar(sample), sample) %T>%
  print()

unique(meta_format$cruise)
```
## Check Spatial Locations
```{r check-spatial, fig.height=15, fig.width=20}
(meta_format %>%
   # filter(station == "24" | station == "MR") %>%
  ggplot(aes(x = lon, y = lat, 
              group = station
             )) +
  geom_point(data = select(meta_format, -name.of.water.body),
             color = "gray80",
             shape = 3) +
  geom_point(aes(color = name.of.water.body)) + 
   facet_grid(~name.of.water.body)
  ) %>%
  plotly::ggplotly()
```

```{r}
# find previously saved files
prev_f <-
  # local_sv %>%                         # local
  here(cloud_dir, "blank_sheets") %>% # cloud

  dir_ls(regexp = glue("^[^~]*hplc.*\\.xlsx$"))

getSheetNames(prev_f)[-c(1, 5:12)]

hplc_check <-
  getSheetNames(prev_f)[-c(1, 5:12)] %>%
  map(., ~ read.xlsx(prev_f, sheet = .x, startRow = 2) %>%
    mutate(
      sheet = .x,
      collection_date = as.character(collection_date),
      station = as.character(station),
      present = as.character(present),
      absent = as.character(absent),
      notes  = as.character(notes),
      collected_by = as.character(collected_by)
    ))   %>%
  list_rbind() 

hplc_miss <- 
  filter(hplc_check, str_detect(absent, "X"))

hplc_check <-
  filter(hplc_check, str_detect(present, "X"))

# meta_format_check <-
#   meta_format %>%
#   filter(cruise %in% getSheetNames(prev_f)) %>% 
#   full_join(hplc_check,
#     by = join_by(sample == identifier),
#     na_matches = "never"
#   ) %>%
#   mutate(
#     arr = str_extract(sheet, "\\d+"),
#     arr = if_else(is.na(arr), 
#                   str_extract(cruise, "\\d+"),
#                   arr 
#                   )
#   ) %>%
#     
#   arrange(arr) %>%
#   select(-c(1:3, 6, 9, name.of.water.body, filter.type:contains("shipment")),
#          -arr)
# 
# meta_format_filt <- 
#   meta_format_check %>%
#   filter(if_any(c(present, absent), \(x) !is.na(x)) &
#     !is.na(present)) %>%
#   select(-c(present:notes)) 
# 
# naniar::vis_miss(meta_format_check)
# naniar::vis_miss(meta_format_filt)
# 
#   
# if (TRUE || !file_exists(here("data", "metadata", "hplc_check"))) {
#   cli::cli_alert_info("Saving `hplc_check` file.")
#   openxlsx::write.xlsx(
#     meta_format_check,
#     file = here("data", "metadata",
#      glue("hplc_check",
#           ".xlsx")
#           ),
#     na = "",
#     overwrite = FALSE
#   )
#   shell.exec(here("data", "metadata",
#      glue("hplc_check",
#           ".xlsx")
#           ))
# }


meta_format <-
  meta_format %>%
  left_join(select(hplc_check, identifier, notes), 
            by = join_by("sample" == "identifier")
  )
```

## Check for Missing Data
```{r check-na}
print(naniar::vis_miss(select(meta_format, -1, -2)))
```

# Save Workbook
```{r save-wb}
sv <- TRUE
if (TRUE) {
  wb <- loadWorkbook(template)

  writeData(
    wb,
    sheet    = 1,
    x        = grant_info$info,
    startRow = grant_loc[1],
    startCol = grant_loc[2] + 1,
    colNames = FALSE
  )

  writeData(
    wb,
    sheet    = 1,
    x        = meta_format,
    startRow = loc[1] + 1,
    colNames = FALSE
  )

  openXL(wb)
  if (sv) {
    cli::cli_alert_warning(
      c(
        "Make sure you want to save before continuing\n",
        "[Enter] to continue\n",
        "[Esc]   to cancel\n"
      )
    )
    readline("")
  
  
    cli::cli_alert_info("Saving File!")
    # save
    saveWorkbook(
      wb = wb,
      file = here(
        "data", "metadata",
        glue(
          grant_info$last_nm,
          format(Sys.Date(), "_%Y%m%d_"),
          str_c(cruise_id, collapse = "_"),
          ".xlsx"
        )
      )
    )
  }
}


if (FALSE) {
  here("data", "metadata") %>%
  dir_ls(regexp = "Diger") %>%
  str_subset("~\\$", negate = TRUE) %>%
  sort(decreasing = TRUE) %>%
  first() %>%
  file_copy(new_path = here(cloud_dir, "hplc", "hplc_sample_info"))
}
```




```{r}
# sv <- FALSE
# if (FALSE) {
#   wb <- loadWorkbook(template)
# 
#   writeData(
#     wb,
#     sheet    = 1,
#     x        = grant_info$info,
#     startRow = grant_loc[1],
#     startCol = grant_loc[2] + 1,
#     colNames = FALSE
#   )
# 
#   writeData(wb,
#     sheet = 1,
#     x = meta_format_filt,
#     startRow = loc[1] + 1,
#     colNames = FALSE
#   )
# 
# 
#   if (!sv) {
#     # open
#     openXL(wb)
# 
#     sv <- TRUE
#   } else if (sv) {
#     cli::cli_alert_warning(
#       c(
#         "Make sure you want to save before continuing\n",
#         "[Enter] to continue\n",
#         "[Esc]   to cancel\n"
#       )
#     )
#     readline("")
# 
# 
#     cli::cli_alert_info("Saving File!")
#     # save
#     saveWorkbook(
#       wb   = wb,
#       file = here(
#         "data", "metadata",
#         glue(
#           grant_info$last_nm,
#           format(Sys.Date(), "_%Y%m%d_"),
#           str_c(cruise_id, collapse = "_"),
#           ".xlsx"
#         )
#       )
#     )
#   }
# }
```

