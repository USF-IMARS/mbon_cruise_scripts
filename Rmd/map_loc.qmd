---
title: "Sample Map"
format: html
editor: visual
---

```{r setup}
librarian::shelf(
  librarian, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # broom # optional
  
  # added
  ggrepel, ggtext, readxl,
  
  # idk if needed
  fields, raster, rerddap, rgdal, ncdf4, sf, metR, cowplot
)

library("conflicted")

conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
```

```{r load-locations}
# ---- Info ----
cruise_id <- "WS23011 (IMaRS)"
dates     <- "January 11<sup>th</sup> - 17<sup>th</sup>, 2023"

# ---- Load Locations ----
# file with locations
loc_file <- 
  here("data", "metadata") %>%
  fs::dir_ls(regexp = "^[^~]*locations.*xlsx")

# sample
loca <-  
  loc_file %>%
  readxl::read_xlsx(.name_repair = janitor::make_clean_names)

# all
all_loc <- 
  loc_file %>%
  read_xlsx(sheet = 2, 
            .name_repair = janitor::make_clean_names) %>%
  filter(!(station %in% loca$station))

# zoo
zoo_loc <- 
  loc_file %>%
  read_xlsx(sheet = 3, 
            .name_repair = janitor::make_clean_names) 


```

```{r data-manipulation}
loc_labs <- 
  loca %>%
  group_by(station) %>%
  mutate(vals = 1) %>%
  select(-c(notes, lat, lon)) %>%
  pivot_wider(
               # id_cols = optional vector of unaffected columns,
               names_from  = c(sample_type),
               values_from = vals,
               names_sep   = "_",
               values_fn   = sum
  ) %>% 
  ungroup() %>%
  janitor::clean_names() %>%
  rowwise() %>%
  mutate(sums = sum(chl_a, hplc, cdom, e_dna, na.rm = TRUE),
         labl = case_when(
                  sums == 4 ~ "CHL, HPLC and CDOM",
                  sums == 10 ~ "CHL, HPLC, CDOM, eDNA for surf and bot",
                  sums == 6 ~ "CHL, HPLC (replicate), CDOM and eDNA",
                  sums == 5 & hplc == 2 ~ "CHL, HPLC (replicate) and CDOM",
                  sums == 5 && e_dna == 1 ~ "CHL, HPLC, CDOM, and eDNA",
                  TRUE ~ NA_character_
         )) %>%
  select(-c(chl_a:sums))


loca2 <- 
  loca %>%
  select(-notes, -sample_type) %>%
  distinct(station, .keep_all = TRUE) %>%
  right_join(., loc_labs, by = "station") %>%
  mutate(
    lon = if_else(station == 58, -81.65333333, lon),
    lat = if_else(station == 58, 25.16666667, lat),
    lon = if_else(station == 68, -81.16666667, lon),
    lat = if_else(station == 68, 24.93, lat)
  )
```

```{r bound-box}
# fixes issue with reading file?
sf::sf_use_s2(FALSE)

# path to map files on local computuer
path <- here("D:/zooplankton.test", "data", "map")



# bounding box
exnt <- c(xmin = -84, # West
          xmax = -80, # East
          ymin = 24,  # South
          ymax = 28.5 # North 
        )
```

Topography, ETOPO1, 0.0166667 degrees, Global (longitude -180 to 180), (Ice Sheet Surface) from https://coastwatch.pfeg.noaa.gov/erddap/griddap/

Global Self-consistent, Hierarchical, High-resolution Geography Database (GSHHG) from https://www.ngdc.noaa.gov/mgg/shorelines/

```{r download-map}
if (!dir_exists(path)) {
  # only useful if don't have access to map file
  dir_create(path)
  
  
  if (!file.exists(here(path,"etopo1.nc"))) {
    message("Getting Topography Data")
    # ERDDAP extract and save
    griddap(
      info('etopo180'),
      latitude  = exnt[3:4],
      longitude = exnt[1:2],
      stride    = c(1, 1),
      fields    = 'altitude',
      store     = disk(path)
    )
    
    # Rename file 
    file_move(dir_ls(path, regexp = "\\.nc$"),
              here("data","map", "etopo1.nc"))
    
    # rm(etopo)
  }
  
  coast <- 
    dir_ls(path    = path,
           recurse = TRUE ,
           regexp  = "GSHHS_h_L1.shp")
  
  if (rlang::is_empty(coast)) {
    message("Getting Coastline Data")
    temp        <- tempfile()
        download.file(
            "ftp://ftp.soest.hawaii.edu/gshhg/gshhg-shp-2.3.7.zip",
            temp,
            method = "libcurl",
            mode   = "wb"
        )
        unzip(exdir = path, temp)
        unlink(temp)
        rm(temp)
  }
  
  rm(coast)
}
```

```{r load-map-files}
# select and read coastline file from GSHHS then crop
world2 <- 
  dir_ls(path    = path,
         recurse = TRUE ,
         regexp  = "GSHHS_h_L1.shp") %>%
  st_read(.) %>%
  st_crop(., st_bbox(exnt))

```

```{r base-map}
plt <- ggplot() +
  geom_sf(data = world2) +
  scale_x_continuous(expand = c(0,0)) + 
  scale_y_continuous(expand = c(0,0), breaks = seq(24.5, 28.0, 0.5)) +
  coord_sf(xlim = exnt[1:2], ylim = exnt[3:4]) +
  labs(
    x = NULL,
    y = NULL,
    # shape = "Station",
    # fill = "Station"
    ) +
  theme_bw() +
  theme(text = element_text(family = "serif", size = 10),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank()
        # legend.position = c(0.85, 0.25),
        # legend.title = element_text(size = 10), 
        # legend.text = element_text(size = 15),
        # legend.key.size = unit(0.6, "cm"),
        # legend.margin=margin(c(0.1,0.1,0.1,0.1), unit='cm')
        )
plt
```

```{r add-stations, fig.width=8, fig.height=11}
set.seed(123)
plt +
  annotate(geom = "richtext", y = 28, x = -81.5, label = cruise_id,
           size = 10,
           fontface = 'bold',
           fill = NA,
           label.color = NA,
           ) +
  annotate(geom = "richtext", y = 27.85, x = -81.5, label = dates,
           size = 7,
           fontface = 'bold',
           fill = NA,
           label.color = NA) +
  geom_point(
    data = all_loc, aes(x = lon, y = lat),
    shape = 3,
    color = "gray",
    size = 1
  ) +
  # I may want to add labels for all none sampled locations
  # geom_text_repel(data = all_loc, aes(x = lon, y = lat, label = station),
  #                size = 2, 
  #                # hjust = -1,
  #                color = "gray"
  #                # vjust = 1
  #                ) +
  geom_point(
    data = loca2, aes(x = lon, y = lat, color = labl), 
    # show.legend = FALSE
  ) +
 geom_text_repel(data = loca2, aes(x = lon, y = lat, label = station),
                 size = 2.5, 
                 hjust = 0,
                 # direction = "both",
                 # force_pull = 5,
                 # force = 0.5
                 # vjust = 1
                 ) +
  
  scale_color_manual(
    values = c("#FF7F24", "#EE3B3B", "#00FF00", "#1E90FF",  "#BA55D3")) +
  labs(color = NULL) +
  new_scale_color() +
  geom_point(data  = zoo_loc, 
             aes(x     = lon, 
                 y     = lat, 
                 color = labs),
             shape = 5, 
             size  = 2) +
  labs(color = "Zooplankton Mesh") +
  theme(
    legend.position = c(0.2, 0.14),
    legend.text     = element_text(size = 10),
    legend.title    = element_text(size = 15)
  )

```

```{r save-map, fig.width=8.5, fig.height=11}
if (FALSE) {
  ggsave(here("data", "metadata", "sample_locations.jpeg"),
         dpi    = 900,
         width  = 8.5,
         height = 11)
} 
```
