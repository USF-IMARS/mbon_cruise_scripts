---
title: "Sample Map"
author: "Sebastian Di Geronimo"
date: "2023-01-05"
format: html
editor: source
---

# ---- Load Libraries ----
## Load Libraries
```{r setup}
librarian::shelf(
  librarian, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # broom # optional
  
  # added
  ggrepel, ggtext, readxl, ggnewscale,
  
  # idk if needed
  fields, raster, rerddap, rgdal, ncdf4, sf, metR, cowplot,
  # datefixR
)

library("conflicted")

conflicts_prefer(
  dplyr::filter,
  dplyr::select
  )

# scripts to download and create maps
proj_functions <- new.env()
source(here("scripts", "map_files_dwnlod.R"), local = proj_functions)
source(here("scripts", "misc_functions.R"), local = proj_functions)
attach(proj_functions)
rm(proj_functions)

# functions available in `proj_functions` envrionment
ls("proj_functions")

# fixes issue with reading raster file using decimal degrees
sf::sf_use_s2(FALSE)
```

## File Path and Cruise ID
Ship:
WS = Walton Smith
WB = WeatherBird II
SV = Savannah
H = Hogarth
```{r cruide-id-info}
# ---- Edit Cruise Info ----
cruise_id <-
  tibble(
    ship        = "WS",           # Here, ship acronym
    start_dates = "July 22 2023", # Here, month day year
    end_dates   = "July 28 2023"  # Here, month day year
  ) %>%
  mutate(
    cruise_id = parse_date(start_dates, format = "%B %d %Y"),
    cruise_id = str_c(ship, format(cruise_id, "%y"), yday(cruise_id)),
    label = map2_chr(
      .x = start_dates,
      .y = end_dates,
      date_label
    ),
    start_dates = as_date(start_dates, format = "%B %d %Y"),
    end_dates   = as_date(end_dates, format = "%B %d %Y"),
  ) %T>%
  print()

cli::cli_alert_warning(
  c("Did you make sure to update cruise info?\n\n",
  "---- Press the [Enter] key to continue! ----\n",
  "\t or go back to fix it!"))
invisible(readline())
```


```{r paths}
# paths to data location files
loc_file <- 
  here("data", "metadata") %>%
  fs::dir_ls(regexp = "^[^~]*locations.*xlsx")

# path to base map files
map_loc <- here("data", "map_shp")

# spatial extent
exnt <- c(xmin = -84, # West
          xmax = -80, # East
          ymin = 24,  # South
          ymax = 28.5 # North 
        )
```

## Load Data Locations (Lat/Lon)
```{r load-locations}
# sample
loca <-  
  loc_file %>%
  readxl::read_xlsx(sheet = 5,
                    .name_repair = janitor::make_clean_names,
                    )

# NOAA 
all_loc <- 
  loc_file %>%
  readxl::read_xlsx(sheet = 2, 
            .name_repair = janitor::make_clean_names) %>%
  filter(!(station %in% loca$station))

# zooplankton
zoo_loc <- 
  loc_file %>%
  readxl::read_xlsx(sheet = 3, 
            .name_repair = janitor::make_clean_names) 


```

## Match NOAA and IMaRS Locations
```{r data-manipulation}
plt_labels <- c(
  "CHL, HPLC and CDOM",
  "CHL, HPLC (replicate) and CDOM",
  "CHL, HPLC, CDOM, and eDNA",
  "CHL, HPLC (replicate), CDOM and eDNA",
  "CHL, HPLC, CDOM, eDNA for surf and bot"
)

# define labels for map
loc_labs <-
  loca %>%
  group_by(station) %>%
  mutate(vals = 1) %>%
  select(-c(notes, lat, lon)) %>%
  pivot_wider(
               # id_cols = optional vector of unaffected columns,
               names_from  = c(sample_type),
               values_from = vals,
               names_sep   = "_",
               values_fn   = sum
  ) %>% 
  ungroup() %>%
  janitor::clean_names() %>%
  rowwise() %>%
  mutate(sums = sum(chl_a, hplc, cdom, e_dna, na.rm = TRUE),
         labl = case_when(
                  sums == 4 ~ plt_labels[1], # "CHL, HPLC and CDOM",
                  sums == 5 && hplc == 2 ~ plt_labels[2], #"CHL, HPLC (replicate) and CDOM",
                  sums == 5 && e_dna == 1 ~ plt_labels[3],#"CHL, HPLC, CDOM, and eDNA",
                  sums == 6 ~ plt_labels[4], #"CHL, HPLC (replicate), CDOM and eDNA",
                  sums == 10 ~ plt_labels[5],#"CHL, HPLC, CDOM, eDNA for surf and bot",
                  .default = NA_character_
         ),
         labl = fct(labl, 
                    levels = plt_labels)) %>%
  ungroup() %>%
  select(-c(chl_a:sums)) %>%
  mutate(
    .by = labl,
    labl = glue("{labl}, ({n()})")
  )

loca2 <- 
  loca %>%
  select(-notes, -sample_type) %>%
  distinct(station, .keep_all = TRUE) %>%
  right_join(., loc_labs, by = "station") %>%
  mutate(
    lon = if_else(station == 58, -81.65333333, lon),
    lat = if_else(station == 58, 25.16666667, lat),
    lon = if_else(station == 68, -81.16666667, lon),
    lat = if_else(station == 68, 24.93, lat)
  )
```

## Additional noaa locations starting Feb 2023
```{r noaa-loc}
noaa_loc <-
  loc_file %>%
  read_xlsx(sheet = 4, 
            .name_repair = janitor::make_clean_names)  %>%
  rename("station" = waypoint) %>%
  unite(col = "lat", 2:4, sep = " ") %>%
  unite(col = "lon", 3:5, sep = " ") %>%
  mutate(
    station = case_when(
                        str_detect(station, "MR") ~ "MR",
                        str_detect(station, "21/ LK") ~ "LK",
                        str_detect(station, "WS") ~ "WS",
                        TRUE ~ station
                        ),
    lon = parzer::parse_lon(lon),
    lat = parzer::parse_lat(lat), 
    .before = 2
    ) %>%
  filter(!(station %in% loca2$station))
  

loca2[loca2$station %in% noaa_loc$station,]
noaa_loc[!(noaa_loc$station %in% loca2$station),]$station

# addtional locations ----
# add_loc <- paste("BG7", "CW7", "ROME5", sep = "|")

# noaa_loc_add <- 
#   noaa_loc %>%
#   filter(str_detect(waypoint, add_loc)) %>%
#   
#   mutate(
#     
#     station = waypoint,
#     labl = "CHL, HPLC, CDOM, and eDNA",
#    
#     
#     ) 
# 
# loca2 <- loca2 %>% 
#   bind_rows(noaa_loc_add)
  
```

# ---- Base Map Data ----

Topography, ETOPO1, 0.0166667 degrees, Global (longitude -180 to 180), (Ice Sheet Surface) from https://coastwatch.pfeg.noaa.gov/erddap/griddap/

Global Self-consistent, Hierarchical, High-resolution Geography Database (GSHHG) from https://www.ngdc.noaa.gov/mgg/shorelines/

```{r download-map}
# download topography (.nc) and coastline (.shp)
world_download(
  path_land  = map_loc,
  path_topo  = map_loc,
  extent     = exnt,
  use_suffix = NULL
)
```

## Load Base Maps for Plotting 
```{r load-map-files}
# select and read coastline file from GSHHS then crop
# load maps
map_obj <-
  load_map_obj(
    .map_coast = map_loc,
    .map_state = NULL,
    .map_bath  = map_loc,
    .map_file  = "etopo1.nc",
    .extent    = exnt
  )
```

## Plot Base Map
```{r base-map}
base_plt <- 
base_map_plot(map_obj$coast_topo, .bathy = NULL, exnt)
base_plt
```

# ---- Plot Locations ----
```{r add-stations, fig.width=8.5, fig.height=11}
set.seed(123)
imars_map <-
  base_plt +
  # ---- Cruise ID
  annotate(
    geom        = "richtext", 
    x           = -81.5,
    y           = 28,
    # label       = glue("{cruise_id$cruise_id[1]} (eDNA)"),
    label       = glue("{cruise_id$cruise_id[1]} (IMaRS)"),
    size        = 10,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family = "serif"
  ) +
  # ---- Cruise Dates
  annotate(
    geom        = "richtext", 
    x           = -81.5,
    y           = 27.85, 
    label       = cruise_id$label[1],
    size        = 7,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family = "serif"
  ) +
  # ---- NOAA Locations
  geom_point(
    data  = noaa_loc,
    aes(x = lon, 
        y = lat),
    shape = 3,
    color = "gray",
    size  = 1
  ) +
  # I may want to add labels for all none sampled locations
  # geom_text_repel(data = all_loc, aes(x = lon, y = lat, label = station),
  #                size = 2,
  #                # hjust = -1,
  #                color = "gray"
  #                # vjust = 1
  #                ) +
  # ---- Sample Locations
  geom_point(
    data = loca2,
    aes(x = lon, 
        y = lat, 
        color = labl),
  ) +
  geom_text_repel(
    aes(x = lon, 
        y = lat, 
        label = station),
    data  = loca2,
    size  = 2.5,
    hjust = 0,
  ) +
  
  scale_color_manual(
    name   = "Samples",
    # values = c("#FF7F24", "#EE3B3B", "#00FF00", "#1E90FF", "#BA55D3")
    values = c("#999999", "#E69F00", "#56B4E9", "#009E73",
            "#CC79A7")
  ) +
  labs(color = NULL) +

  # ---- Zooplankton
  new_scale_color() +
  geom_point(
    data  = zoo_loc,
    aes(
      x = lon,
      y = lat,
      color = labs
    ),
    shape = 5,
    size  = 2
  ) +
  labs(color = "Zooplankton Mesh Size") +
  theme(
    legend.position = c(0.2, 0.14),
    legend.text     = element_text(size = 10),
    legend.title    = element_text(size = 15)
  )
imars_map
```
## Save Map
```{r save-map, fig.width=8.5, fig.height=11}
sv_arg <-
  list(
    save_path = here("data", "metadata", "cruise_map")
  ) %>%
  c(
    file_name =
      here(
        "data", "metadata", "cruise_map",
        glue("{cruise_id$cruise_id}_imars_sample_locations.jpeg")
      )
  )

if (!file_exists(sv_arg$file_name) || FALSE) {
  # create directory if doens't exist
  fs::dir_create(sv_arg$save_path)
  
  cli::cli_alert_info("Creating map!")
  
  # save map
  cowplot::save_plot(
   sv_arg$file_name,
   plot   = imars_map,
   dpi    = 600,
   base_width  = 8.5,
   base_height = 11
  )
} else {
  cli::cli_alert_info("Map already exists, not overwriting!")
}
```

# Create Cloud Directory for Cruise and Copy Files
Function to create the cruise directory within the `cruise_location`.
Sub-directories created: 
  - "metadata" for logsheets 
  - "forms" for paperwork
  - "CDOM" for CDOM data
  - "apad" for filter pad data
  - "bb3" for BB3 data

This function will copy blank files of:
  - logsheet
  - self-insurance
  - volunteer paperwork (`Volunteer` = `TRUE` shows that volunteer paperwork is 
                         needed)
  - map file if exists locally

```{r}
cruise_setup(
  cruise_location = here(cloud_dir, "years"),
  cruise_id = cruise_id$cruise_id,
  cruise_date = cruise_id$start_dates,
  blank_location = here(cloud_dir, "blank_sheets", "pre_cruise_blank_sheets"),
  volunteer = TRUE,
  map_file = sv_arg$file_name
)

rm(sv_arg)
```


# ---- eDNA map only ----
```{r edna-stations}
loc_lab2 <- 
 loca %>%
  group_by(station) %>%
  mutate(vals = 1) %>%
  select(-c(notes, lat, lon)) %>%
  pivot_wider(
               # id_cols = optional vector of unaffected columns,
               names_from  = c(sample_type),
               values_from = vals,
               names_sep   = "_",
               values_fn   = sum
  ) %>% 
  ungroup() %>%
  select(1, eDNA) %>%
  filter(!is.na(eDNA)) %>%
  mutate(
    .keep = "none",
    station,
    labl = case_when(
      eDNA == 1 ~ "eDNA",
      eDNA == 2 ~ "eDNA surf and bottom",
    )
  ) 

loca2_edna <- 
loca %>%
  select(-notes, -sample_type) %>%
  distinct(station, .keep_all = TRUE) %>%
  right_join(., loc_lab2, by = "station") %>%
  mutate(
    lon = if_else(station == 58, -81.65333333, lon),
    lat = if_else(station == 58, 25.16666667, lat),
    lon = if_else(station == 68, -81.16666667, lon),
    lat = if_else(station == 68, 24.93, lat)
  )

noaa_loc <-
  loc_file %>%
  read_xlsx(sheet = 4, 
            .name_repair = janitor::make_clean_names)  %>%
  rename("station" = waypoint) %>%
  unite(col = "lat", 2:4, sep = " ") %>%
  unite(col = "lon", 3:5, sep = " ") %>%
  mutate(
    station = case_when(
                        str_detect(station, "MR") ~ "MR",
                        str_detect(station, "21/ LK") ~ "LK",
                        str_detect(station, "WS") ~ "WS",
                        TRUE ~ station
                        ),
    lon = parzer::parse_lon(lon),
    lat = parzer::parse_lat(lat), 
    .before = 2
    ) %>%
  filter(!(station %in% loca2_edna$station))
  

loca2_edna[loca2_edna$station %in% noaa_loc$station,]
noaa_loc[!(noaa_loc$station %in% loca2_edna$station),]$station
```

```{r edna-stations-map, fig.width=8.5, fig.height=11}
set.seed(123)
edna_map <-
  base_plt +
  # ---- Cruise ID
  annotate(
    geom        = "richtext", 
    x           = -81.5,
    y           = 28,
    label       = glue("{cruise_id$cruise_id[1]} (eDNA)"),
    size        = 10,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family = "serif"
  ) +
  # ---- Cruise Dates
  annotate(
    geom        = "richtext", 
    x           = -81.5,
    y           = 27.85, 
    label       = cruise_id$label[1],
    size        = 7,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family = "serif"
  ) +
  # ---- NOAA Locations
  geom_point(
    data  = noaa_loc,
    aes(x = lon, 
        y = lat),
    shape = 3,
    color = "gray",
    size  = 1
  ) +
  # I may want to add labels for all none sampled locations
  # geom_text_repel(data = all_loc, aes(x = lon, y = lat, label = station),
  #                size = 2,
  #                # hjust = -1,
  #                color = "gray"
  #                # vjust = 1
  #                ) +
  # ---- Sample Locations
  geom_point(
    data = loca2_edna,
    aes(x = lon, 
        y = lat, 
        color = labl),
  ) +
  geom_text_repel(
    aes(x = lon, 
        y = lat, 
        label = station),
    data  = loca2_edna,
    size  = 2.5,
    hjust = 0,
  ) +
  
  scale_color_manual(
    name   = "Samples",
    values = c( "#E69F00", "#56B4E9", "#009E73")
  ) +
  labs(color = NULL) +

  theme(
    legend.position = c(0.2, 0.14),
    legend.text     = element_text(size = 10),
    legend.title    = element_text(size = 15)
  )
edna_map
```

## eDNA Save Map
```{r save-edna-map, fig.width=8.5, fig.height=11}
sv_arg <-
  list(
    save_path = here("data", "metadata", "cruise_map")
  ) %>%
  c(
    file_name =
      here(
        "data", "metadata", "cruise_map",
        glue("{cruise_id$cruise_id}_edna_sample_locations.jpeg")
      )
  )

if (!file_exists(sv_arg$file_name) || FALSE) {
  # create directory if doens't exist
  fs::dir_create(sv_arg$save_path)
  
  # save map
  cowplot::save_plot(
   sv_arg$file_name,
   plot   = edna_map,
   dpi    = 900,
   base_width  = 8.5,
   base_height = 11
  )
} 

rm(sv_arg)
```
