---
title: "Check SeaBASS Files Before Submission"
author: "Sebastian DiGeronimo"
date: "2022-08-25"
output: html_document
---

# 1.0 ---- Summary of Document ----

This doucment is ment to be used before submission of new/old data to the NASA
SeaBASS Archive. 

Two processes:
1. Read `.sb` file to check for accuracy
2. Run NASA's FCHECK protocol to verify it conforms to their SeaBASS file 
   structure (i.e. `.sb`)


The sections are broken down into two parts:
1. HPLC data
  - pigment data
  - load 
  - FCHECK
  
2. Particulate/phyto/non-algal absorption (i.e. $ a_p, a_{ph},~\text{and}~a_{nap} $) and
   CDOM absorption (i.e. $ a_{CDOM} $)
   - bio-optical data
   - load
   - FCHECK


## Notes on FCHECK:

- `FCHECK` uses `Perl` to run
  - Since the SeaBASS archive has been around for awhile, they use the 
    programming language `Perl` to run the `FCHECK` process
  - if it is not available in your syste, it will ask you to download `Perl`
  - if you do not have `FCHECK`, you will be prompted to download it as well



# 2.0 ---- Setup ----

## 2.1 Load Libraries ----
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  # broom # optional
  
  # additional
  cli
)

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )

e <- new.env()
source(here(".Rprofile"))
source(here("scripts", "check_data.R"))
source(here("scripts", "misc_functions.R"), local = e)
attach(e, name = "fcheck_func")

rm(e)
```


# 3.0 ---- HPLC Data ----

## 3.1 Read SeaBass **HPLC** Files and Check for Issues
All columns are read as characters to check for any issues with the data
```{r read-seabass-hplc}
# get most recent directory created for seabass files
ind_f_dir <- 
  here("data", "processed", "hplc") %>%
  dir_ls(type   = "directory", 
         regexp = "ind_file") %>%
  sort(decreasing = TRUE)

# read seabass hplc files
sb_data <-
  ind_f_dir  %>%
  last_mod() %>%
  dir_ls(regexp = "\\.sb") %>%
  tibble(file = .) %>%
  mutate(data = map(
    file, 
    # function to read seasbass hplc files and extract data
    \(x) read_sb_files(x, col_type = "c", sample_type = "hplc")
    )) %>%
  unnest(data)

message(glue("The dimensions are: {dim_desc(sb_data)}"))
slice_sample(sb_data, n = 10)

filter(sb_data, if_any(sample:volfilt, \(x) is.na(x) | str_detect(x, "-9999")))
```


## 3.2 FCHECK: HPLC Checking `.sb` Files Locally for Issues

This is used by NASA to pre-check the .sb files before official submission 
process. This requires the use of "Perl" <https://www.perl.org/get.html>.
A quick download and it should work.

Then a download of FCHECK from NASA:
<https://seabass.gsfc.nasa.gov/wiki/FCHECK/fcheck4.tar>

Cruises not ready
- WS16074
- WS16130
- WS16263

SFMBON_WS16074_pigment_20160314_R1.sb: 1 error (1 unique) and 5 warnings (1 unique) were found.
SFMBON_WS16130_pigment_20160509_R1.sb: 1 error (1 unique) and 5 warnings (1 unique) were found.
SFMBON_WS16263_pigment_20160919_R1.sb: 1 error (1 unique) and 5 warnings (1 unique) were found.

```{r fcheck-hplc}
# ---- Toggle if want to see fcheck out put or look just for errors
verb <- FALSE
# verb <- TRUE

fcheck_results <- 
 ind_f_dir %>%
 last_mod() %>%
 dir_ls() %>%
 tibble(files = .) %>%
 sb_fcheck(
   .,
   col_name   = "files",
   loc_fcheck = here(), 
   verb       = verb)

# rm(verb, i, ind_f_dir)
```


# 4.0 ---- Check **Particulate absorption**, **CDOM absorption** and **[Chlorophyll-a]** Files ----


## 4.1 Load Bio-optical Data


```{r directory-seabass-filt-cdom-chl}
cruise_dir <- 
  here(cloud_dir, "seabass", "testing") %>%
  dir_ls() %T>% print()

cruise_submit <- 
  here(cloud_dir, "seabass", "submitted") %>%
  dir_ls() %T>% print()

# list of files for submission
cruise_dir <- 
  str_subset(
    cruise_dir, 
    str_c(basename(cruise_submit), collapse = "|"),
    negate = TRUE
  ) %T>% print()

# check files to submit
cruise_dir %>%
  tibble(files = .) %>%
  mutate(
    base     = basename(files),
    year     = str_extract(base, "\\d{2}"),
    year     = glue("20{year}"),
    doy      = str_extract(base, "\\d{3}$"),
    doy      = as.numeric(doy),
    year     = as.numeric(year),
    count_ap = map_int(files, ~ length(dir_ls(.x, regexp = "ap.*\\.sb$"))),
    count_ag = map_int(files, ~ length(dir_ls(.x, regexp = "ag.*\\.sb$"))),
    count_chl = map_int(files, ~ length(dir_ls(.x, regexp = "chl.*\\.sb$"))),
  ) %>%
  arrange(year, doy) %>%
  select(
    "Year"                  = year,
    "Cruise ID"             = base,
    "ap Samples"            = count_ap,
    "ag Samples"            = count_ag,
    "Extracted chl Samples" = count_chl,
  ) # %>%
# write_csv(file = here("files.csv"))

# shell.exec(here())
```


## 4.3 Read SeaBASS Files


```{r read-seabass-filt-cdom-chl}
cruise_dat <-
  cruise_dir %>%
  dir_ls(regexp = "\\.sb", recurse = 1) %>%
  tibble(file = .) %>%
  mutate(type = str_extract(file, "ag|ap|chl")) %>%
  # slice_head(n = 6, by = type)  %>%
  
   mutate(
     data = map(
      file,
      # function to read seasbass hplc files and extract data
      \(x) read_sb_files(x, col_types = "c", sample_type = "default")
      )
    ) %>%
  nest(.by = type) %>%
  mutate(
    data2 = map(
      data, 
      \(x) unnest(x, cols = data)
      )
  )

ag  <- cruise_dat$data2[[1]]
ap  <- cruise_dat$data2[[2]]
chl <- cruise_dat$data2[[3]]
```


## 4.4 FCHECK: Bio-optical Checking `.sb` Files Locally for Issues

 Notes to fix 

chl 
- /calibration_data to /calibration_date
- extra comma: 
  - /units=yyyy,mo,dd,hh,mn,ss,degrees,degrees,none,none,m,,m,L,mg/m^3
  - /units=yyyy,mo,dd,hh,mn,ss,degrees,degrees,none,none,m,m,L,mg/m^3
- 1)  Required header label \"/water_depth\" not provided."
  - add /water_depth = na
```{r fcehck-seabass-filt-cdom-chl}
# ---- Toggle if want to see fcheck out put or look just for errors
verb <- FALSE
# verb <- TRUE


fcheck_results <-
  cruise_dir %>%
  # str_subset("", negate = FALSE) %>%
  # str_subset("", negate = TRUE) %>%
  map(
    .,
    \(x) {
      dir_ls(x, regexp = "\\.sb") %>%
        tibble(files = .) %>%
        sb_fcheck(
          .,
          col_name   = "files",
          loc_fcheck = here(),
          verb       = verb,
          row_check  = "end"
        )
    }
  )
```

## *WIP*: Show Results

```{r fcehck-seabass-filt-cdom-chl}
fcheck_results %>%
  list_c() %$%
  list_c(fcheck2) %>%
  unique() %>%
  str_subset(".*testing.*",
  negate = TRUE) %>%
  sort() %>% 
  cat(sep = "\n") 


fcheck_results %>%
  list_c() %$%
  list_c(fcheck2) %>%
  tibble(tes = .) %>%
  slice(
    (19432 - 10):(19432 + 20), 
    (22095 - 10):(22095 + 20)
    )
  which(str_detect(tes, "mal"))
```


## X.0 ---- Move Files to Temporary Directory ----


```{r mv-files-to-temp}
{
  cli::cli_text(
    c(
      "Check that all SeaBASS files pass the {.emph FCHECK}
      {col_red(\"before\")} proceeding!"
    )
  )
  
  cont <- menu(c("Correct", "Incorrect"))
}

if (cont == 1) {

  cruise_dir %>%
  # str_subset("", negate = TRUE) %>%
  # str_subset("", negate = FALSE) %>%
  walk(
    .,
    submit_path = here(cloud_dir, "seabass", "temp"),
    (\(x, submit_path) {
      
      cli::cli_alert_info("Copying files from cruise {basename(x)}")
      
      
      new_loc     <-  here(submit_path, basename(x))
      new_loc_sup <- here(new_loc, "supplimental_docs")
        
      # copy files to new location
      dir_copy(x, new_loc)
      
      # move non-seabass files (not .sb) to supplemental docs
      dir_create(new_loc_sup)
      
      dir_ls(new_loc, type = "file") %>%
      str_subset("\\.sb$", negate = TRUE) %>%
      file_move(new_loc_sup)
    
      })
    
  )

} else {
  cli_alert_warning("Skipping moving of SeaBASS directory.")
}



```


# X.0 ---- Load Bio-optical Data ----



```{r}
cruise_dir %>%
  dir_ls(regexp = "\\.sb", recurse = 1) %>%
  tibble(file = .) %>%
  mutate(type = str_extract(file, "ag|ap|chl")) %>%
  filter(str_detect(type, "ap") &
    str_detect(file, "_MR|_54|ap_WS_|ap_57_")) %>%
  # slice(1:10) %>%
  slice_head(prop = 0.1) %>%
  mutate(
    info =
      map(
        file,
        \(x) {
          meta <- readr::read_lines(x) %>%
            str_subset("^/") %>%
            str_subset("=") %>%
            str_remove_all("/|\\[.*\\]") %>%
            str_split("=", simplify = TRUE) %>%
            as_tibble() %>%
            rename("param" = 1, "value" = 2) %>%
            pivot_wider(
              data         = .,
              # id_cols      = c(file, type), # *optional* vector of unaffected columns,
              names_from   = c(param), # category column(s) to pivot wide
              values_from  = c(value), # value column(s) that hold data for each category column
              names_sep    = "_",
              names_repair = janitor::make_clean_names
            ) %>%
            hablar::retype(-station)


          data <- read_sb_files(x, col_types = "c", sample_type = "default")

          list(
            "meta" = meta,
            "data" = data
          )
        }
      )
  ) %>%
  unnest_wider(info) %>%
  unnest(meta) %>%
  unnest(data) %>%
  hablar::retype(-station) %>%
  mutate(
    start_date = ymd(start_date),
    end_date   = ymd(end_date),
    start_time = hms::as_hms(start_time),
    end_time   = hms::as_hms(end_time)
  ) %>%
  mutate(
    .by      = data_file_name,
    aph_norm = aph / max(aph, na.rm = TRUE)
  ) %T>% print() %>%
  # slice(1) %>%
  ggplot(aes(
    x = wavelength,
    # y = abs_ag,
    # y = aph,
    # color = month(start_date, label = TRUE, abbr = TRUE)
    color = station
  )) +
  geom_smooth(
    aes(y = ap),
    method = "loess",
    span = 0.01,
    formula = y ~ x,
    se = FALSE,
    linetype = "dashed"
  ) +
  geom_smooth(
    aes(y = aph),
    method = "loess",
    span = 0.01,
    formula = y ~ x,
    se = FALSE
  ) +
  # geom_line() +
  labs(color = "Month") +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(
    expand = c(0, 0),
    limits = c(0, NA),
    oob = scales::squish
  ) +
  # facet_wrap(~ year(start_date) + station, ncol = 3, scales = "free_y") +
  facet_wrap(~cruise, ncol = 4, scales = "free_y") +
  ggthemes::theme_calc()


```



