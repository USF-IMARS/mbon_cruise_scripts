---
title: "Consolidate HPLC Data"
author: "Sebastian Di Geronimo"
date: '2023-03-13'
format: html
---

# Load Libraries
```{r setup}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # additional
  cli,
  readxl, cellranger, 
  janitor,
  scales, hms
)

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )
```

# Search for HPLC Files
M-K 06-12 report.xlsx : may and sept 2016
M-K 09-02 report.xlsx : nov16, mar17 jun17 oct17 jan18
M-K 10-11 part1 report.xlsx
M-K 10-11 part2 report.xlsx
M-K_05-17_report.xlsx : mar16

M-K_13-01_report: all 2022 cruise data

Muller-Karger_13-01B_report_rev: all 2023 cruise data


```{r file-path}
dir_hplc <- here("data", "raw", "hplc")


# cal files
cal_file <- 
  dir_hplc %>%
  dir_ls(regexp = "method") %>%
  basename() %T>% 
  print()

# pigment files
file_pig <-
  dir_hplc %>%
  dir_ls(
    recurse = FALSE,
    type = "file",
    # included ^[^~]* to not match ~, means that a file is opened
    regexp = "^[^~]*\\.xlsx$"
  ) %>%
  str_sort() %>%
  str_subset("M-K 10-11 part1 report.xlsx", negate = TRUE) %>%
  str_subset("Muller-Karger_13-01B", negate = FALSE) %>%
  tibble(file = ., base = basename(.)) %>%
  mutate(
    sheets =
      map(
        file,
        \(x) excel_sheets(x)
      ),
    cal_files = 
      case_when(
        str_detect(base, "13-01B") ~ str_subset(cal_file, "10032021"),
        str_detect(base, "10-11") ~ str_subset(cal_file, "02062020"),
        .default = str_subset(cal_file, "06122017")
    )
  ) %>%
  unnest(sheets) %>%
  pivot_wider(
    id_cols      = c(file, base, cal_files), # *optional* vector of unaffected columns,
    names_from   = sheets, # category column(s) to pivot wide
    values_from  = sheets, # value column(s) that hold data for each category column
    names_repair = janitor::make_clean_names
  ) %T>% 
  print()
```

## Read Files and Select Variables for SeaBass


```{r read-file-edit}
hplc_data <-
  file_pig %>%
  mutate(
    .keep = "none",
    file,
    base,
    cal_files, 
    data = map2(
      .x = file,
      .y = report,
      ~ suppressWarnings(read_xlsx(
        .x,
        # sheet = "Report",
        sheet = .y,
        skip  = 8,
        na    = "-9999",
        .name_repair = janitor::make_clean_names
        )) %>%
        select(1,
          contains("cruise"), 
          matches("original_pi_sample_label|^sample"),  
          station, contains(c("vol", "water_depth")),
          matches("sampling_depth_meters|^depth"), 
          matches("gregorian_month|^month"), 
          contains("time"), matches("^day"), matches("^year"),
          contains(c("lon", "lat", "replic")), 
          contains("Tot_Chl_a"):last_col(),
          -contains(c("extracted", "comments", "sequential", "other"))
          ) %>% 
  
        # rename to make all the same column names
        rename(
          any_of(
            c(
              hplc_gsfc_id = "gsfc_lab_sample_code",
              hplc_gsfc_id = "gsfc_sample_code",
              cruise       = "cruise_name",
              day          = "day_of_gregorian_month",
              depth        = "sampling_depth_meters",
              month        = "gregorian_month",
              lat          = "latitude",
              lon          = "longitude",
              sample       = "original_pi_sample_label",
              time         = "gmt_time",
              volfilt      = "volume_filtered_ml",
              water_depth  = "total_water_depth_meters",
              year         = "year_of_sample"
              )
            )
          ) %>%
        # change time to hh:mm:ss and add date
        mutate(
          time  = 
            if_else(
              str_detect(time, ":") 
              & str_length(time) == 5, 
              time, 
              str_replace(time, "(\\d{2})(\\d{2})", "\\1:\\2")
              ),
           time = glue("{time}:00"),
           time = as.character(time),
          ) %>%
        mutate(
          time  = hms::as_hms(time),
          month = str_extract(month, "\\w{3}"), # fix one month: Febuary
          month = if_else(
            str_detect(cruise, "19210") & str_detect(month, "(?i)jun"), 
            "Aug", month),
          date  = ymd(glue("{year}-{month}-{day}"),
                              tz = "utc"),
          .before = month) %>%
        
        # fix one depth value to numeric
        mutate(
          depth = as.character(depth),
          depth = case_when(
                    str_detect(depth, "2..15") ~ "2.15",
                    .default = depth),
          depth = as.numeric(depth),
          indicate_if_filters_are_replicates = 
            as.character(indicate_if_filters_are_replicates)
          ) %>%
        
        # fix one character value to numeric
        mutate(
          water_depth = as.character(water_depth),
          water_depth = case_when(
                          str_detect(water_depth, "flow") ~ "1",
                          .default = water_depth),
          water_depth = as.numeric(water_depth)
        ) %>%
      
        # fix one set of cruise ID values  
        mutate(
           cruise = case_when(
             str_detect(sample, "WS20278") ~ "Walton Smith 20278",
             str_detect(sample, "WS16263") ~ "Walton Smith 16263",
             .default = cruise)
           ) %>%
        
        # edit station names to be uppercase and no spaces
        mutate(
          station = str_to_upper(station),
          station = str_remove(station, "[:space:]"),
          station = str_replace(station, "-", "_")
        ) %>%
        
        # fix lat, lon
        mutate(
          lat = if_else(str_detect(cruise, "20278") 
                        & station == "V8", 26.83457,lat),
          lon = if_else(str_detect(cruise, "20278")
                        & station == "V8", -82.95946,lon),
          lat = if_else(lat < 0, -1 * lat, lat),
          lon = if_else(lon > 0, -1 * lon, lon)
          )  %>%
          
        # convert vol filtered from mL to L
        mutate(volfilt = volfilt / 1000)
      )) %>%
  unnest(data) %>%
  
  # add cruise ID
  mutate(cruise_id = case_when(
      str_detect(cruise, "(?i)wal") ~ str_c("WS", str_extract(cruise, "[0-9]+")),
      str_detect(cruise, "(?i)sav") ~ str_c("SV", str_extract(cruise, "[0-9]+")),
      str_detect(cruise, "(?i)wea") ~ str_c("WB", str_extract(cruise, "[0-9]+")),
      str_detect(cruise, "(?i)hog") ~ str_c("H", str_extract(cruise, "[0-9]+")),
      .default = "no"
      )) %T>% 
  print()
```


```{r aoml-check}
aoml <-
  (here("data", "raw") %>%
  dir_ls(regexp = "WSMasterSampleLog",
         recurse = TRUE))[1] %>%
  read_xlsx(
    guess_max = 7000,
    na = "Skip too shallow",
    .name_repair = make_clean_names
    ) %>% 
  select(cruise, station, contains(c("gmt", "decimal"))) %>% 
  mutate(
    time_gmt = as_hms(time_gmt),
    station  = case_when(str_detect(station, "(?i)naples") ~ "NBH",
                         str_detect(station, "(?i)casey")  ~ "CBH",
                         .default = station),
    station = str_replace(station, " |-", "_"),
    station = if_else(str_detect(station, "LK|^21$"), "LK", station),
    station = if_else(str_detect(cruise, "WS19210") 
                      & str_detect(station, "9.5"), "9B", station),
    
    cruise = str_replace(cruise, "SAV", "SV"),
    cruise = case_when(str_detect(cruise, "WS18120") 
                       & date_gmt > as_date("2018-08-01") ~ "WS18218",
                       str_detect(cruise, "WS20231")      ~ "WS20230",
                       str_detect(cruise, "SV1803")       ~ "SV18067",
                       .default = cruise),

    longitude_decimal = if_else(longitude_decimal > 0, 
                                -1 * longitude_decimal, # TRUE
                                longitude_decimal       # FALSE
                                )) %>%
  filter(cruise %in% hplc_data$cruise_id) %>%
  distinct(cruise, station, .keep_all = TRUE)

hplc_data <-
  hplc_data %>%
  # left_join(aoml, by = join_by(cruise_id == cruise, station)) %>%
  # mutate(
  #   cruise_id,
  #   station,
  #   lon   = if_else(abs(lon - longitude_decimal) < 0.1 
  #                    is.na(longitude_decimal), 
  #                   lon, longitude_decimal),
  #   lat   = if_else(abs(lat - latitude_decimal) < 0.1
  #                    is.na(latitude_decimal), 
  #                   lat, latitude_decimal),
  #   lon = round(lon, 4),
  #   lat = round(lat, 4),
  #   date  = if_else(abs(as.double(date, date_gmt, units = "days")) <= 1
  #                    is.na(date_gmt), 
  #                   date, date_gmt), 
  #   time  = if_else(abs(as.double(time - time_gmt, units = "secs")) < 600
  #                    is.na(time_gmt), 
  #                   time, time_gmt),
  #   .keep = "unused"
  # ) %>%
  nest(.by = c(cruise, cruise_id)) %>%
  mutate(
    data  = map(.x = data,
                ~ remove_empty(.x, which = "cols")),
    names = map(.x = data,
                (\(x) 
                 select(x, contains("Tot_Chl_a"):last_col())  %>%
                 names()  %>%
                 tibble(param_name = .))),
    
    base  = map(.x = data, \(x) pull(x, base) %>% unique())
    )
```


```{r precision}
precise <-
  mutate(
    .data = file_pig,
    .keep = "none",
    base,
    precison = map2(
      .x = file,
      .y = replicate_filter_precision,
      (\(.x, .y) 
       read_xlsx(
         path  = .x,
         sheet = .y,
         range = cellranger::cell_limits(c(1,1), c(3,3)),
         na    = "-9999",
         col_names    = FALSE,
         .name_repair = make_clean_names)))
  ) %>%
  
  unnest(precison, keep_empty = TRUE) %>%
  mutate(
    x_2 = str_remove(x_2, " ="),
    x   = case_when(is.na(x_2) ~ "no replicates",
                    .default = x)) %>%
  fill(x) %>%
  pivot_wider(
    names_from   = x_2, 
    values_from  = x_3, 
    names_sep    = "_",
    names_repair = make_clean_names) %>%
  
   remove_empty(which = "cols") %>%
   mutate(across(c(t_chl_a, ppig), ~ scales::percent(., 0.01)))

hplc_data <- 
  hplc_data %>%
  unnest(base)   %>%
  left_join(., precise, by = join_by(base)) %>%
  nest(precision = base:n, 
       .by = c(cruise, cruise_id)) %>%
  left_join(hplc_data, ., by = join_by(cruise, cruise_id)) %T>% 
  print()
```

# Create Checklist Files
Experiment Name

Cruise Name

a. Filter type/pore size:
b. Vacuum pressure:
c. Replicates collected (# or no):   
e. Flash frozen in L/N (y/n):
f. Long term storage conditions/temperature:

```{r checklist}
shelf(r2rtf)
dir_create(here(dir_hplc, "checklist"))
           
chk_ls <-
  dir_hplc %>%
  dir_ls(regexp = "checklist",
         type = "file") %>%
  str_subset(., "ignore", negate = TRUE) %>%
  sort() 

srch_terms <-
  tibble::tribble(
                                     ~ search, ~info,
                            "Experiment Name", "SFMBON",
                                "Cruise Name", NA,
                     "Filter type/pore size:", "Whatman GF/F, 0.7 um",
                           "Vacuum pressure:", "< 5 atm??",
        "Replicates collected \\(# or no\\):", NA,
             "Flash frozen in L/N \\(y/n\\):", "y",
  "Long term storage conditions/temperature:", "-80 deg C Freezer"
  )

hplc_data <-
  hplc_data %>%
  mutate(
    check_f = map_chr(
      base,
      function(x) {
        base_num <- str_extract(x, "\\d{2}-\\d{2}B*")
        chk_num  <- str_detect(chk_ls, base_num)
        chk_ls[which(chk_num)]
        # chk_num  <- str_extract(chk_ls, "\\d{2}-\\d{2}")
        # chk_ls[which(base_num == chk_num)][1]
      }
    ),
    rtf_file = map2_chr(
      .x = check_f,
      .y = cruise_id,
      function(x, y) {
        if (!is.na(x)) {
          # dir_create(here(dirname(x), "checklist"))
          here(
            dir_hplc, "checklist",
            glue(
              str_extract(basename(x), "check.*hplc"),
              "_", y, ".rtf"
            )
          )
        } else {
          NA_character_
        }
      }
    ),
    map_file = glue("{cruise_id}_sample_map.jpeg")
  )

hplc_rtf <- hplc_data
```


# Map Sample Points
```{r plt_data, fig.width=8.5, fig.height=11}
# scripts to download and create maps
source(here("scripts", "map_files_dwnlod.R"))

# location of map
map_loc <- 
  here("data", "map_shp")

# extract columns to map data points
hplc_gps <- 
 hplc_data %>%
  select(-c(names:(contains("map") - 1))) %>%
  hoist(data, "station", "lat", "lon", "depth", "date") %>%
  select(-data) %>%
  unnest_longer(col = c(station, lat, lon, depth, date)) 

# extract date range of samples per cruise for title
date_range <-
  hplc_gps %>%
  summarise(
    .by       = cruise_id,
    min_date  = min(date, na.rm = TRUE),
    max_date  = max(date, na.rm = TRUE),
    diff_date = max_date - min_date
  ) %>%
  mutate(
    .keep = "none",
    cruise_id,
    map_title = str_c(
      cruise_id, ": ",
      format(min_date, "%b %d %Y"),
      " - ",
      format(max_date, "%b %d %Y")
    )
  )

# add labels to points for duplicates and multiple depths
hplc_gps <- 
  hplc_gps %>%
  summarise(
    .by = c(cruise, cruise_id, station, depth, map_file),
      lat = median(lat, na.rm = TRUE),
      lon = median(lon, na.rm = TRUE),
      dupes = n(),
  ) %>%
  mutate(
    .by = c(cruise, cruise_id, station),
    depth_num = n(),
    labels = case_when(
      dupes > 1 & depth_num > 1 ~ "Duplicates and Multiple Depth",
      dupes > 1 ~ "Duplicates",
      depth_num > 1 ~ "Multiple Depths",
      .default = "Single"
    )
  ) %>%
  mutate(
    labels = forcats::fct_infreq(labels)
  ) %>%
  drop_na(station:lon) %>%
  distinct(cruise, station, .keep_all = TRUE)

# get largest spatial extent for all cruises +/- 0.5 deg 
extnt_all <-
  summarise(
    hplc_gps,
    across(
      .cols = c(lon, lat),
      .fns = list(
        min = (\(x) min(x, na.rm = TRUE) - 0.5),
        max = (\(x) max(x, na.rm = TRUE) + 0.5)
      ),
      .names = "{.col}_{.fn}"
    )
  ) %>%
  magrittr::set_names(c("xmin", "xmax","ymin","ymax")) %>%
  c(recursive = TRUE) 

# nest all cruises station locations
hplc_gps <-
  hplc_gps %>%
  nest(.by = c(cruise, cruise_id, map_file)) %>%
  mutate(
    extnt_cr = map(
      .x = data,
      function(x) {
        x %>%
          # get min and max of head per cruise header info
          summarise(
            across(
              .cols = c(lon, lat),
              .fns  = list(
                min = (\(x) min(x, na.rm = TRUE) - 0.1),
                max = (\(x) max(x, na.rm = TRUE) + 0.1)
              ),
              .names = "{.col}_{.fn}"
            )
          ) %>%
          mutate(
            across(
              where(is.numeric),
              (\(x) round(x, 3))
            )
          )
      }
    )) %>%
  left_join(
    date_range, by = "cruise_id"
  )

# download topography (.nc) and coastline (.shp)
world_download(
  path_land = map_loc,
  path_topo = map_loc,
  extent    = extnt_all
)

# load downloaded map objects
map_obj <- load_map_obj(
  .map_coast = map_loc,
  .map_state = map_loc,
  .map_bath  = map_loc,
  .map_file  = "etopo1.nc",
  .extent    = c(
          xmin = -90, # West
          xmax = -75, # East
          ymin = 20, # South
          ymax = 35 # North
        )
)

base_plt       <- base_map_plot(map_obj$coast_topo, map_obj$bathy, extnt_all)
hplc_inset_map <- map_inset(map_obj$coast_topo, map_obj$state, extnt_all)

# create final maps
# TODO: would be useful to parallelize here
hplc_gps <-
  hplc_gps %>%
  mutate(
    plt = pmap(
      list(data, cruise_id, map_title, extnt_cr),
      .f = map_plot,
      .base_plt = base_plt,
      .inset = hplc_inset_map
    )
  )

hplc_gps$plt

# save final maps
if (FALSE) {
  hplc_gps %$%
    walk2(
      .x = map_file,
      .y = plt,
      function(x, y) {
        map_dir <-
          here(
            "data", "processed", "hplc",
            glue("map_{Sys.Date()}")
          )
        dir_create(map_dir)

        cowplot::save_plot(
          filename    = here(map_dir, x),
          plot        = y,
          base_height = 11,
          base_width  = 8.5,
          dpi         = 600,
          units       = "in",
          device      = "jpeg"
        )
      }
    )
}
```


```{r save-hplc-data}
dir_create(here("data", "processed", "hplc"))
hplc_data <- 
  select(hplc_data, -check_f) %>%
  mutate(rtf_file = basename(rtf_file))

save(hplc_data,
      file =  here("data", "processed", "hplc", 
                   glue("consolidated_HPLC_{Sys.Date()}.RData")
                   )
     )
```

## Write New Checklist files (.rtf)
```{r write-checklist}
ovrwrt <- FALSE
# ovrwrt <- TRUE

ignore_files <- vector("character", nrow(hplc_rtf))

for (i in seq(nrow(hplc_rtf))) {
  if (
    !is.na(hplc_rtf$check_f[[i]]) 
    &
    (!file_exists(hplc_rtf$rtf_file[[i]]) | ovrwrt)
      ) {
    cli_alert_info("Cruise ID: {hplc_rtf$cruise_id[[i]]}")
    cli_alert_info("Creating file: {basename(hplc_rtf$rtf_file[[i]])}")
    file_copy(hplc_rtf$check_f[[i]],
              hplc_rtf$rtf_file[[i]],
              overwrite = ovrwrt)
    ignore_files[i] <- NA
  } else {
    cli_alert_info("Skipping Cruise ID: {hplc_rtf$cruise_id[[i]]}")
    ignore_files[i] <- hplc_rtf$rtf_file[[i]]
      
  }
}

hplc_rtf %>% 
  filter(!is.na(rtf_file) &
         !rtf_file %in% ignore_files) %>%
  mutate(
    .keep = "used",
    cruise_id,
    rtf_file,
    text = map(
      .x = rtf_file,
      ~ readLines(.x) %>%
        tibble(text = .)
    ),
    text = pmap(
      list(text, cruise_id, rtf_file, data),
      (function(x, y, z, dat) {  
       cat(y)
         dupes <- 
          dat %>%
          summarise(.by = c(station, depth),
                    counts = n() > 1) %>%
          summarise(dups = sum(counts))  %>%
          as.vector()
       
       x %>%
        mutate(
          text = str_replace(text, srch_terms$search[[1]], 
                             glue("\\0: {srch_terms$info[1]}")),
          text = str_replace(text, srch_terms$search[[2]], 
                             glue("\\0: {y}")),
          text = str_replace(text, srch_terms$search[[3]], 
                             glue("\\0 {srch_terms$info[3]}")),
          text = str_replace(text, srch_terms$search[[4]], 
                             glue("\\0 {srch_terms$info[4]}")),
          text = str_replace(text, srch_terms$search[[5]], 
                             glue("\\0 {if_else(dupes != 0, as.character(dupes), 
                                        'no')}")),
          text = str_replace(text, srch_terms$search[[6]], 
                             glue("\\0 {srch_terms$info[6]}")),
          text = str_replace(text, srch_terms$search[[7]], 
                             glue("\\0 {srch_terms$info[7]}"))
    ) %T>% 
    r2rtf::write_rtf(., z)
    }))
  )
```


# Extract Comments from Sheets
```{r comments}
shelf(openxlsx)
for (i in seq(nrow(file_pig))) {
  temp_file <- file_pig$file[[i]]
  
  wb <- 
    temp_file %>%
    loadWorkbook()
  sht <- which(names(wb) == "Report")
  
  # extract comment
  comm <-
   sapply(wb$comments[[sht]], "[[", "comment" )
  
  # determine class: none, list or matrix
  # do appropriate action
  if (identical(comm, list())) {
    print("none")
    next
  } else if (any(class(comm) == "list")) {
    print("list")
    comm <-
      tibble(comm = comm) %>%
      unnest(comm) %>%
      filter(!str_detect(comm, "csthoma1|ckenemer"))
    
  } else if (any(class(comm) == "matrix")) {
    print("matrx")
    comm <-
      as_tibble(t(comm)) %>%
      select("comm" = V2)
  }
 
  # combine info to comment
  temp <- 
    tibble(
      file = temp_file,
      base = basename(temp_file),
      cell = sapply(wb$comments[[sht]], "[[", "ref" ), 
      auth = sapply(wb$comments[[sht]], "[[", "author" ), 
      comm = comm
      ) %>%
    unnest(comm)  %>%
    filter(!str_detect(comm, "Thread"))
  
  # add comments to previous file
  if (!exists("xlsx_comm") | i == 1) {
    xlsx_comm <- temp
    } else {
      xlsx_comm <- bind_rows(xlsx_comm, temp)
      }
  
}

# filter out non-comment and save
xlsx_comm %>%
  mutate(
    comm = str_remove(comm, "\n"),
    comm = str_replace(comm, "\n", " "),
    comm = str_replace(comm, ",", ";")
  ) %>%
  
  {if (FALSE) {
  write_csv(., file = here("data", "processed", "hplc", 
                        glue("comments_report_{Sys.Date()}.csv")))
  } else {.}
    }
```

