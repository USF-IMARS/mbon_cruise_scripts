---
title: "Extract Chla from Process Log"
author: "Sebastian Di Geronimo"
date: 2024-05-31
format: html
editor: source
---

# 1.0 ---- Summary of Document ----

Load all process logs from the IMaRS cruise cloud directory.

Extract the chlorophyll-a sheet and format the master chlorophyll-a sheet.

Format similar to: <https://usf.app.box.com/file/1408231012503>

Date (UTC)
Time (UTC)	
Latitude (deg. N)	
Longitude (deg. W)	
Bottom Depth (m)	
Sample Depth (m)	
Station   ID	
CruiseID	
CruiseOrder	
SampleID	
ap,d(λ) process date	
ap,d(λ) filename	
Volume seawater (ml)
Volume methanol (ml)
'No Acid' Rb
'Acid' Rb	
'Acid' Ra	Fluorometer Calibration date	
Fluorometer Calibration 'r'	Cal.     
'No Acid' Low	'No Acid' Low	Cal.     
'No Acid' High 	
'No Acid' High	Cal.  
'Acid' Low 	
'Acid' Low	Cal. 
'Acid' High 	
'Acid' High	
'No Acid' ratio	
'Acid' ratio	[Chl a] (mg m-3)	 
AVG  [Chl a] (mg m-3)	
STDEV [Chl a] (mg m-3)
[Chl a] (mg m-3)	
AVG  [Chl a] (mg m-3)	
STDEV [Chl a] (mg m-3)	
[Pheo] (mg m-3)	 
AVG  [Pheo] (mg m-3)	
STDEV [Pheo] (mg m-3)	
No Acid' [Chl a]/ 'Acid' [Chl a]	
[Pheo]/ [Chl a]	
No Acid' [Chl a]/ 'Acid' [Chl a]
[Pheo]/ [Chl a]	
Original Comments	
Comments Digna

# 2.0 ---- Setup ----


## 2.1 Load Libraries

```{r setup, include=FALSE}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # additional
  
)

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )
  
if (!exists("cloud_dir")) source(here(".Rprofile"))

# set location to save data and plots
dir_data_save <- here("data", "processed", "extract_chla_process_log")
```

## 2.2 Load Dataset

```{r load-data}
file_paths <- 
  here(cloud_dir, "process_logs") %>%
  dir_ls() %T>%
  print()
```
# 3.0 Read Process Log Files

```{r read-process-log}
# read files and filter out non-run samples
process_data <-
  file_paths[-1] %>%
  map(
    \(.x) {
      openxlsx2::read_xlsx(
        file         = .x,
        sheet        = "Chl-a",
        start_row    = 3,
        show_formula = FALSE,
      ) %>%
        filter(!is.na(`Process date`)) %>%
        mutate(Comments = as.character(Comments)) %>%
        hablar::retype()
    }
  )

# find empty files and remove from list
remove_files <- vector()
for (i in seq(process_data)) {
  print(i)
  
  if (nrow(process_data[[i]]) == 0) {
    remove_files <- c(remove_files, i)
  }
}

# organize cruises by cruise start date
process_data_save <- 
  process_data[-remove_files] %>%
  bind_rows() %>%
  mutate(
    .before = 1,
    cruise = str_extract(`Sample ID`, "(.*)-(\\d{1,3})", group = 1),
  ) %>%
  nest(.by = cruise) %>%
  mutate(
    year = str_extract(cruise, "\\d{2}"),
    year = as.numeric(year),
    date = str_extract(cruise, "\\d{3}$"),
    date = as.numeric(date)
  ) %>%
  arrange(year, date) %>%
  unnest(data) %>%
  mutate(
    .before = 1,
    cruise = str_extract(`Sample ID`, "(.*)-(\\d{1,3})", group = 1),
    samp_num = str_extract(`Sample ID`, "-(\\d{1,3})", group = 1),
    samp_num = as.numeric(samp_num),
    samp_lag = dplyr::lag(samp_num),
    samp_diff = samp_num - samp_lag
  ) %T>%
  print() %>%
  select(
    -c(samp_num, samp_lag, samp_diff, cruise, year, date)
  ) %T>% 
  print()
  
```

# 4.0 Save Process Log 

```{r save-process-log}
# overwrite file if exists
overwrite <- FALSE
# overwrite <- TRUE

# file name:
# based on range of years and today's date
save_file_name <-
  here(
    dir_data_save,
    glue(
      "filters_chlorophyll_",
      paste(range(year(process_data_save[[1]])), collapse = "_"),
      "_{Sys.Date()}.xlsx"
    )
  )

# create directory for save
dir_create(dir_data_save)

# save file
openxlsx2::write_xlsx(
  x          = process_data_save,
  file       = save_file_name,
  as_table   = FALSE,
  na.strings = "",
  overwrite  = overwrite
)

# open folder to local save
shell.exec(dir_data_save)
```

## 4.1 Copy to Cloud

```{r cloud-copy}
if (FALSE) {
  file_copy(
    path     = save_file_name,
    new_path = here(cloud_dir, "Chl_filters")
  )
}
```





# 5.0 Find Chlorophyll-a Data Before Sept 2019

## 5.1 Search for Files

removing cruise WS17030 because no data for chlorophyll or a_p

```{r file-search}
file_paths <- 
  here(cloud_dir, "years") %>%
  dir_ls(regexp = "WS_abs", recurse = 2)  %>%
  str_subset("~|WS17030", negate = TRUE) %T>%
  print()
```

## 5.2 

```{r}
chl_data <- 
  file_paths %>%
  tibble(files = .) %>%
  # filter(str_detect(files, "WS18285")) %>%
  # slice(c(1:2)) %>%
  mutate(
    cruise_id = dirname(files),
    cruise_id = basename(cruise_id),
    data = 
      map2(
        .x = files,
        .y = cruise_id,
        \(.x, .y) {
          message(.y)
          
          data <- 
          openxlsx2::read_xlsx(
            file       = .x,
            sheet      = "Chl-a",
            start_row  = 7,
            na.strings = c("#N/A", "#DIV/0!")
          ) %>%
          janitor::clean_names()  %>%
            
          mutate(
            comments            = as.character(comments),
            ap_d_l_process_date = as_date(ap_d_l_process_date)
          ) %>%
          janitor::remove_empty("rows") %>%
          janitor::remove_empty("cols")
          
          if (any(str_detect(names(data), "ap_d_l_filename_ap_ad"))) {
            data <- 
              data %>%
              mutate(ap_d_l_filename_ap_ad = as.character(ap_d_l_filename_ap_ad))
          } else if (any(str_detect(names(data), "ap_d_l_filename"))) {
            data <- 
              data %>%
              rename("ap_d_l_filename_ap_ad" = ap_d_l_filename)
          }
          
          if (any(str_detect(names(data), "time_utc"))) {
            data <- 
              data %>%
              mutate(
                .after = time_utc,
                time_utc = str_remove(time_utc, "\\d{4}-\\d{2}-\\d{2}\\s"),
                time_utc = str_replace(time_utc, "\\.(\\d{2})", "\\1:00"),
                # time_utc = as_datetime(time_utc),
                time_utc = hms::as_hms(time_utc),
                date_time = paste(date_utc, time_utc),
                date_time = ymd_hms(date_time)
            )
          } else if (any(str_detect(names(data), "time_est"))) {
            
            data <- 
              data %>%
              mutate(
                .after = time_est,
                time_est = str_remove(time_est, "\\d{4}-\\d{2}-\\d{2}\\s"),
                # time_utc = hms::as_hms(time_utc, tz = "est"),
                # time_utc2 = as_datetime(time_utc, tz = "utc"),
                # time_utc2 = hms::as_hms(time_utc2),
                date_time_est = paste(date_est, time_est),
                date_time_est = ymd_hms(date_time_est, tz = "est"),
                date_time = as_datetime(date_time_est, tz = "UTC"),
                date_utc = as_date(date_time),
                time_utc = hms::as_hms(date_time)
              )
            
          }
          
          if (any(str_detect(names(data), "no_acid_chl_a_mg_m_3"))) {
            data <- 
              data %>%
              rename(
                "chl_a_mg_m_3"   = no_acid_chl_a_mg_m_3,
                "chl_a_mg_m_3_2" = acid_chl_a_mg_m_3,
                "pheo_mg_m_3"    = acid_pheo_mg_m_3
                )
            
          }
          
          return(data)
        }
    )
  ) 

chl_unnest <- 
  chl_data %>%
  unnest(data) %>%
  select(-general_location) %>%
  relocate(
    .after = date_time,
    date_est,
    time_est,
    date_time_est
  ) %>%
  
  # fix station names
  mutate(
    station_id = str_remove_all(station_id, "\\s|~"),
    station_id = str_to_upper(station_id),
    station_id = str_replace(station_id, "9999", "CK")
  ) %>%
  print()
  
```




## 5.4 Save Older Chlorophyll-a Data

```{r save-old-chl}
# overwrite file if exists
overwrite <- FALSE
overwrite <- TRUE


# file name:
# based on range of years and today's date
save_file_name <-
  here(
    dir_data_save,
    glue(
      "filter_chlorophyll_2015_to_2019",
      "_{Sys.Date()}.xlsx"
    )
  )

# create directory for save
dir_create(dir_data_save)
openxlsx2::write_xlsx(
  x          = chl_unnest,
  file       = save_file_name,
  as_table   = FALSE,
  na.strings = "",
  overwrite  = overwrite
)

shell.exec(dirname(dir_data_save))

```

