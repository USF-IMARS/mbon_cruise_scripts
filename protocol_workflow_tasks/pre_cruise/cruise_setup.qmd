---
title: "Sample Map"
author: "Sebastian Di Geronimo"
date: "2023-01-05"
format: html
editor: source
---

# pre_cruise_tasks_docx
Complete the steps outlined in [pre_cruise_tasks.docx](mbon_imars_cruises/blank_sheets/pre_cruise_tasks.docx).

# ---- Load Libraries ----

```{r setup}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # added
  ggrepel, ggtext, readxl, ggnewscale, cli,
  
  # idk if needed
  fields, raster, rerddap, rgdal, ncdf4, sf, metR, cowplot, anytime, 
  parzer
)

conflicts_prefer(
  dplyr::filter,
  dplyr::select
  )

# scripts to download and create maps
proj_functions <- new.env()
source(here("scripts", "map_files_dwnlod.R"), local = proj_functions)
source(here("scripts", "misc_functions.R"), local = proj_functions)
attach(proj_functions)
rm(proj_functions)

# functions available in `proj_functions` environment
cli_alert(c("These are custom functions avaiable for this project!\n",
            "Documentations is location in {.path {here(\"scripts\")}}"))
ls("proj_functions")

# fixes issue with reading raster file using decimal degrees
sf::sf_use_s2(FALSE)
```



# ---- File Path and Cruise ID ----


|   Ship Name    |  Acronym   |
| :-----------:  | :--------: |
| Walton Smith   |    WS      |
| WeatherBird II |    WB      |
| Savannah       |    SV      |
| Hogarth        |    H|HG    |



```{r cruide-id-info}
source(here(".Rprofile"))

# ---- cruise folder path
# EDIT location if want to put elsewhere. This will put it in the year of the
# start date. Folders will be created if they don't exists.

cruise_folder_path <- here(cloud_dir, "years") # cloud directory
# cruise_folder_path <- here("data", "years")  # this project folder
# cruise_folder_path <- here(local_dir)        # if using cruise laptop    

# ---- Edit Cruise Info ----
cruise_id <-
  tibble(
    ship        = "HG",                                   # HERE, ship acronym
    start_dates = "March 02 2024",         # START DATE HERE, month day year
    end_dates   = "March 08 2024",           # END DATE HERE, month day year
    volunteer   = FALSE                      # HERE, if need volunteer paperwork
    # volunteer   = TRUE                      # HERE, if need volunteer paperwork
    ) %>%
  mutate(
    cruise_id = parse_date(start_dates, format = "%B %d %Y"),
    cruise_id = str_c(
      ship, 
      format(cruise_id, "%y"), 
      str_pad(yday(cruise_id), width = 3, pad = 0)
      ),
    label = map2_chr(
      .x = start_dates,
      .y = end_dates,
      date_label
    ),
    start_dates = as_date(start_dates, format = "%B %d %Y"),
    end_dates   = as_date(end_dates, format = "%B %d %Y"),
  ) %T>%
  print()

{
cat(
  "Check Cruise Info:",
  sprintf("Ship:       %s", cruise_id$ship[[1]]),
  sprintf("Cruise ID:  %s", cruise_id$cruise_id[[1]]),
  sprintf("Start Date: %s", format(cruise_id$start_dates[[1]], "%B %d, %Y")),
  sprintf("End Date:   %s", format(cruise_id$end_dates[[1]], "%B %d, %Y")),
  "\n",
  sep = "\n"
)

cli::cli_alert_warning(
  c("Make sure the above cruise info is correct before proceeding!\n\n",
  "---- Press the [Enter] key to continue! ----\n",
  "\t or go back to fix it!"))
invisible(readline())
}
```


# Create Cloud Directory for Cruise and Copy Files


Function to create the cruise directory within the `cruise_folder_path`.
Sub-directories created: 
  - "metadata" for logsheets 
  - "forms" for paperwork
  - "CDOM" for CDOM data
  - "apad" for filter pad data
  - "bb3" for BB3 data
  - maybe "above_water_radiometry"

This function will copy blank files of:
  - logsheet
  - self-insurance
  - volunteer paperwork (`Volunteer` = `TRUE` shows that volunteer paperwork is 
                         needed)
  - map file if exists locally
  
  
  
```{r cruise-directory}
dir_path <-
  cruise_setup(
    cruise_location = cruise_folder_path,
    cruise_id       = cruise_id$cruise_id,
    cruise_date     = cruise_id$start_dates,
    blank_location  = here(cloud_dir, 
                           "blank_sheets",
                           "pre_cruise_blank_sheets"),
    volunteer       = cruise_id$volunteer,
    return_path     = TRUE
    ) %>%
    here("metadata") %>%
    dir_ls(regexp = "fknms") %>%
    str_subset("~", negate = TRUE)
```


# Load Data Locations (Lat/Lon)


```{r load-locations}
cli_alert_info("Cruise path: {dirname(dirname(dir_path))}")

# sample locations
loca <-
  readxl::read_excel(
    dir_path,
    sheet = "lat_lon",
    .name_repair = janitor::make_clean_names
  ) %>% 
  select(1:contains("edna")) %>% 
  filter(is.na(other))

# zooplankton locations
zoo_loc <-
  readxl::read_excel(
    dir_path,
    sheet = "zooplankton",
    range = cellranger::cell_rows(c(13, 13 + 8)),
    .name_repair = janitor::make_clean_names
  ) %>%
  select(station,
    "lat" = lat_in,
    "lon" = lon_in,
    mesh_size_um
  ) %>%
  summarise(
    .by = c(station, lat, lon),
    labs = paste(mesh_size_um, collapse = ", ")
  ) %>%
  mutate(
    labs = str_replace(labs, " /", ","),
    labs = str_replace(labs, "64$", "64 (only)")
  )

# NOAA locations
noaa_loc <-
  dir_path %>%
  readxl::read_xlsx(sheet = "noaa_stations", 
            .name_repair = janitor::make_clean_names)  %>%
  rename("station" = waypoint) %>%
  filter(!str_detect(station, "(?i)rsmas|channel|bridge")) %>% 
  unite(col = "lon", 8:10, sep = " ") %>%
  unite(col = "lat", 5:7, sep = " ") %>%
  mutate(
    station = case_when(
      str_detect(station, "MR") ~ "MR",
      str_detect(station, "21/ LK") ~ "LK",
      str_detect(station, "WS") ~ "WS",
      .default = station
      ),
    lon = parzer::parse_lon(lon),
    lat = parzer::parse_lat(lat), 
    .before = 2
    )

# stations not being samples by IMaRS
cli_alert("Stations not sampled by IMaRS")
filter(noaa_loc, !(station %in% loca$station)) %$% station
```

## Match NOAA and IMaRS Locations


Labels:
"CHL, HPLC, CDOM",
"CHL, HPLC (replicate), CDOM",
"CHL, HPLC, CDOM, eDNA",
"CHL, HPLC (replicate), CDOM, eDNA",
"CHL, HPLC, CDOM, eDNA surf and bot"


```{r data-manipulation}
# define labels for map
loca <-
  loca %>%
    mutate(
      .after = lat,
      
      depth_level = str_remove(depth_level, "^surf$"),
      labl = glue("CHL, HPLC, {hplc_replicate}, CDOM, {edna} {depth_level}", 
                  .na = ""),
      labl = str_replace(labl, "HPLC, HPLC replicate", "HPLC (replicate)"),
      labl = str_remove_all(labl, " ,|,\\s+$")
    ) %>%
    mutate(
    .by = labl,
    station,
    lon, lat,
    labl = glue("{labl} ({n()})")
  ) %T>% 
 print()

```

# ---- Base Map Data ----

Topography, ETOPO1, 0.0166667 degrees, Global (longitude -180 to 180), (Ice Sheet Surface) from https://coastwatch.pfeg.noaa.gov/erddap/griddap/

Global Self-consistent, Hierarchical, High-resolution Geography Database (GSHHG) from https://www.ngdc.noaa.gov/mgg/shorelines/

```{r base-map}
if (exists("base_plt")) {
  
  cli::cli_alert_info("{.var base_plot} is already loaded!")
  
} else {
  # path to base map files
  map_loc <- here("data", "map_shp")

  # spatial extent
  exnt <- 
    c(
      xmin = -84, # West
      xmax = -80, # East
      ymin = 24,  # South
      ymax = 28.5 # North 
      )
  ## ---- download topography (.nc) and coastline (.shp)
  world_download(
    path_land  = map_loc,
    path_topo  = map_loc,
    extent     = exnt,
    use_suffix = NULL
  )
  
  ## ---- Load Base Maps for Plotting
  # select and read coastline file from GSHHS then crop
  map_obj <-
    load_map_obj(
      .map_coast = map_loc,
      .map_state = NULL,
      .map_bath  = map_loc,
      .map_file  = "etopo1.nc",
      .extent    = exnt
    )

  ## ---- Plot Base Map
  base_plt <-
    base_map_plot(map_obj$coast_topo, .bathy = map_obj$bathy, exnt)
  base_plt
}
```

# ---- Map Sample Locations ----

## Plot Map

```{r add-stations, fig.width=8.5, fig.height=11}


# edit NOAA cruise plus colors

set.seed(123)
imars_map <-
  base_plt +
  # ---- Cruise ID
  annotate(
    geom        = "richtext", 
    x           = -81.5,
    y           = 28,
    label       = glue("{cruise_id$cruise_id[1]} (IMaRS)"),
    size        = 10,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family      = "serif"
  ) +
  # ---- Cruise Dates
  annotate(
    geom        = "richtext", 
    x           = -81.5,
    y           = 27.85, 
    label       = cruise_id$label[1],
    size        = 7,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family      = "serif"
  ) +
  # ---- NOAA Locations
  geom_point(
    data  = filter(noaa_loc, !(station %in% loca$station)),
    aes(x = lon, 
        y = lat),
    shape = 3,
    color = "gray40",
    size  = 1
  ) +
  # # add labels for all none sampled locations
  # geom_text_repel(
  #   data = filter(noaa_loc, !(station %in% loca$station)), 
  #   aes(x = lon, y = lat, label = station),
  #   size = 2,
  #   # hjust = -1,
  #   color = "gray"
  #   # vjust = 1
  #   ) +
  
  # ---- Sample Locations
  geom_point(
    data = loca,
    aes(x = lon, 
        y = lat, 
        color = labl,
        shape = labl),
  ) +
  geom_text_repel(
    aes(x = lon, 
        y = lat, 
        label = station),
    data   = loca,
    size   = 2.5,
    hjust  = 0,
    family = "serif"
  ) +
  # "#1B9E77" "#D95F02" "#7570B3" "#E7298A" "#66A61E"
  scale_color_manual(
    name   = "Samples",
    values = RColorBrewer::brewer.pal(n = 5, name = "Dark2")
    # values = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#CC79A7")
    ) +
  labs(shape = "Samples") + 
  # ---- Zooplankton
  new_scale_color() +
  geom_point(
    data  = zoo_loc,
    aes(
      x = lon,
      y = lat,
      color = labs
    ),
    shape = 5,
    size  = 2
  ) +
  labs(color = "Zooplankton Mesh Size") +
  theme(
    legend.position = c(0.2, 0.14),
    legend.text     = element_text(size = 10),
    legend.title    = element_text(size = 15),
    legend.background = element_rect(color = "black")
  )

imars_map
```
## Save Map


```{r save-map, fig.width=8.5, fig.height=11}
sv_arg <-
  list(
    save_path = here("data", "metadata", "cruise_map")
  ) %>%
  c(
    file_name =
      here(
        "data", "metadata", "cruise_map",
        glue("{cruise_id$cruise_id}_imars_sample_locations.jpeg")
      )
  )

if (!file_exists(sv_arg$file_name) || FALSE) {
  # create directory if doens't exist
  fs::dir_create(sv_arg$save_path)
  
  cli::cli_alert_info("Creating map!")
  
  # save map
  cowplot::save_plot(
   sv_arg$file_name,
   plot        = imars_map,
   dpi         = 600,
   base_width  = 8.5,
   base_height = 11
  )
} else {
  cli::cli_alert_info("Map already exists, not overwriting!")
}

if (!file_exists(here(dirname(dir_path), basename(sv_arg$file_name)))) {
  file_copy(
        sv_arg$file_name,
        here(dirname(dir_path)),
        overwrite = TRUE
      )
} else {
  cli_alert_info("Map already copied to cruise directory!")
}
rm(sv_arg)
```


# ---- eDNA Sample Map ----

## Filter for eDNA Stations

```{r edna-stations}
loca_edna <-
  loca %>%
  select(station, lon, lat, depth_level, edna) %>%
  filter(!is.na(edna)) %>%
  mutate(labl = glue("{edna} {depth_level}"))

# stations not sampling eDNA
cli_alert("Stations not sampling for eDNA")
filter(noaa_loc, !(station %in% loca_edna$station)) %$% station
```

## Plot eDNA Map

```{r edna-stations-map, fig.width=8.5, fig.height=11}
set.seed(123)
edna_map <-
  base_plt +
  # ---- Cruise ID
  annotate(
    geom        = "richtext",
    x           = -81.5,
    y           = 28,
    label       = glue("{cruise_id$cruise_id[1]} (eDNA)"),
    size        = 10,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family      = "serif"
  ) +
  # ---- Cruise Dates
  annotate(
    geom        = "richtext",
    x           = -81.5,
    y           = 27.85,
    label       = cruise_id$label[1],
    size        = 7,
    fontface    = "bold",
    fill        = NA,
    label.color = NA,
    family      = "serif"
  ) +
  # # uncomment for generalized map
  # annotate(
  #   geom        = "richtext",
  #   x           = -81.3,
  #   y           = 27.5,
  #   label       = ("Current eDNA\n\nMBON Efforts"),
  #   size        = 9,
  #   fontface    = "bold",
  #   fill        = NA,
  #   label.color = NA,
  #   family = "serif"
  # ) +
  # ---- NOAA Locations
  geom_point(
    data = filter(noaa_loc, !(station %in% loca$station)),
    aes(
      x = lon,
      y = lat
    ),
    shape = 3,
    color = "gray",
    size  = 1
  ) +
  # # add labels for all none sampled locations
  # geom_text_repel(
  #   data = filter(noaa_loc, !(station %in% loca$station)), 
  #   aes(x = lon, y = lat, label = station),
  #   size = 2,
  #   # hjust = -1,
  #   color = "gray"
  #   # vjust = 1
  #   ) +
  
  # ---- Sample Locations
  geom_point(
    data = loca_edna,
    aes(
      x = lon,
      y = lat,
      color = labl
    ),
  ) +
  geom_text_repel(
    aes(
      x = lon,
      y = lat,
      label = station
    ),
    data   = loca_edna,
    size   = 2.5,
    hjust  = 0,
    family = "serif"
  ) +

  scale_color_manual(
    name   = "Samples",
    values = c("#E69F00", "#56B4E9", "#009E73")
  ) +

  theme(
    legend.position = c(0.2, 0.14),
    legend.text     = element_text(size = 10),
    legend.title    = element_text(size = 15),
    legend.background = element_rect(color = "black")
  )

edna_map
```

## eDNA Save Map
```{r save-edna-map, fig.width=8.5, fig.height=11}
sv_arg <-
  list(
    save_path = here("data", "metadata", "cruise_map")
  ) %>%
  c(
    file_name =
      here(
        "data", "metadata", "cruise_map",
        glue("{cruise_id$cruise_id}_edna_sample_locations.jpeg")
        # glue("mbon_edna_sample_locations.jpeg")
      )
  )

if (!file_exists(sv_arg$file_name) || FALSE) {
  # create directory if doens't exist
  fs::dir_create(sv_arg$save_path)
  
  # save map
  cowplot::save_plot(
   sv_arg$file_name,
   plot   = edna_map,
   dpi    = 600,
   base_width  = 8.5,
   base_height = 11
  )
} 

if (!file_exists(here(dirname(dir_path), basename(sv_arg$file_name)))) {
  file_copy(
        sv_arg$file_name,
        here(dirname(dir_path)),
        overwrite = TRUE
      )
} else {
  cli_alert_info("Map already copied to cruise directory!")
}

rm(sv_arg)
```

# ---- Copy files from Cloud to Local

```{r copy-cloud-local}
if (exists("local_dir")) {
  cli::cli_text(
    c(
      "Check that the path locations are correct:\n\n",
      "Cloud Location:\n",
      "{dirname(dirname(dir_path))}\n\n",
      "Local Location:\n",
      "{local_dir}"
    )
  )

  cont <- menu(c("Correct", "Incorrect"))

  if (cont == 2) {
    cli_alert_danger("Fix directory paths above in chunk {.var cruide-id-info}!")
  } else if (cont != 1) {
    cli_alert_warning("Skipping copying cruise directory.")
  } else if (cont == 1) {
    cli_alert_info("Copying cruise directory from cloud path to local path.")
    dir_copy(

      # cloud path for cruise
      dirname(dirname(dir_path)),

      # location to copy files
      local_dir
    )
  }
} else {
  cli_alert_warning(
    c("No {.var local_path} set in {.file .Rprofile}!\n",
      "Skipping cruise copying directory."))
}

```

